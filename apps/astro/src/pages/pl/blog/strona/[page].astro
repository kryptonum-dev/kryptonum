---
import Layout from '@/src/layouts/Layout.astro'
import sanityFetch from '@/utils/sanity.fetch'
import metadataFetch from '@/utils/metadata.fetch'
import Breadcrumbs from '@/components/ui/Breadcrumbs.astro'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import Hero, { Hero_Query, type HeroProps } from '@/components/Blog/Hero.astro'
import Listing, { Listing_Query, type Props as ListingProps } from '@/components/Blog/Listing.astro'
import Components, { Components_Query, type ComponentsProps } from '@/components/Components.astro'
import { ITEMS_PER_PAGE } from '@/src/pages/pl/blog/index.astro'
import { DOMAIN } from '@/src/global/constants'

export const totalPosts = await sanityFetch<number>({
  query: `
    count(*[_type == "BlogPost_Collection"])
  `,
})
export const totalPages = Math.ceil(totalPosts / ITEMS_PER_PAGE)
export async function getStaticPaths() {
  return Array.from({ length: totalPages - 1 }, (_, i) => ({
    params: { page: (i + 2).toString() },
  }))
}

const { page: _page } = Astro.params
const page = parseInt(_page)

if (page < 2 || page > totalPages) return Astro.rewrite('/404')

const data = await sanityFetch<{
  name: string
  slug: string
  heading: PortableTextValue
  hero: HeroProps
  listing: ListingProps
  components: ComponentsProps
}>({
  query: `
    *[_type == "Blog_Page"][0] {
      name,
      "slug": slug.current,
      ${PortableTextQuery('heading')}
      ${Hero_Query}
      ${Listing_Query({ currentPage: page })}
      ${Components_Query}
    }
  `,
})

const metadata = await metadataFetch('Blog_Page')
---

<Layout
  title={`${metadata.title} | Strona ${page}`}
  description={metadata.description}
  openGraphImage={metadata.openGraphImage}
  path={Astro.url.pathname}>
  <Fragment slot="Head">
    {page > 2 && <link rel="prev" href={`${DOMAIN}/pl/blog/strona/${page - 1}`} />}
    {page < totalPages && <link rel="next" href={`${DOMAIN}/pl/blog/strona/${page + 1}`} />}
  </Fragment>
  <Breadcrumbs
    data={[
      { name: data.name, path: data.slug },
      { name: `Strona ${page}`, path: `/pl/blog/strona/${page}` },
    ]}
  />
  <PortableText value={data.heading} heading="h1" class="visually-hidden" />
  <Hero {...data.hero} />
  <Listing {...data.listing} currentPage={page} totalItems={data.listing.totalBlogPosts} slugBase={'/pl/blog'} />
  <Components data={data.components} hasPreviousSections={true} />
</Layout>
