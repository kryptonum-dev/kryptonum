---
export const slugPrefix = '/pl/blog/'

import Layout from '@/src/layouts/Layout.astro'
import sanityFetch from '@/utils/sanity.fetch'
import metadataFetch from '@/utils/metadata.fetch'
import Breadcrumbs from '@/components/ui/Breadcrumbs.astro'
import Hero, { Hero_Query, type HeroProps } from '@/components/Blog/Post/Hero.astro'
import Content, { Content_Query, type ContentProps } from '@/components/Blog/Post/Content/index.astro'
import Components, { Components_Query, type ComponentsProps } from '@/components/Components.astro'

export const blogPosts = await sanityFetch<{ slug: string }[]>({
  query: `
    *[_type == 'BlogPost_Collection'][] {
      "slug": slug.current,
    }
  `,
})
export async function getStaticPaths() {
  return blogPosts?.map(({ slug }) => ({ params: { slug: slug.replace(slugPrefix, '') } }))
}

const { slug: _slug } = Astro.params
const slug = `${slugPrefix}${_slug}`

if (!blogPosts.find(({ slug }) => slug === slug)) return Astro.rewrite('/404')

const page = await sanityFetch<{
  name: string
  hero: HeroProps
  components: ComponentsProps
  content: ContentProps
}>({
  query: `
    *[_type == 'BlogPost_Collection' && slug.current == $slug][0] {
      name,
      ${Hero_Query}
      ${Content_Query}
      ${Components_Query}
    }
  `,
  params: { slug: slug },
})
if (!page) return Astro.rewrite('/404')

const metadata = await metadataFetch(slug)
---

<Layout {...metadata}>
  <Breadcrumbs
    data={[
      { name: 'Blog', path: slugPrefix },
      { name: page.name, path: slug },
    ]}
  />
  <Hero {...page.hero} />
  <Content {...page.content} />
  <Components data={page.components} hasPreviousSections={true} />
</Layout>
