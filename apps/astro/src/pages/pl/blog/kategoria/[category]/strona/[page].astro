---
export const slugPrefix = '/pl/blog/kategoria/'

import { ITEMS_PER_PAGE } from '@/src/pages/pl/blog.astro'
import { DOMAIN } from '@/src/global/constants'
import Layout from '@repo/shared/Layout'
import sanityFetch from '@repo/utils/sanity.fetch'
import metadataFetch from '@repo/utils/metadata.fetch'
import Breadcrumbs from '@components/shared/Breadcrumbs.astro'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Hero, { Hero_Query, type HeroProps } from '@components/Blog/Hero.astro'
import Listing, { Listing_Query, type ListingProps } from '@components/Blog/Listing.astro'
import Components, { Components_Query, type ComponentsProps } from '@components/Components.astro'

export async function getCategoryData() {
  return await sanityFetch<{ name: string; slug: string; postCount: number; heading: PortableTextValue }[]>({
    query: `
      *[_type == 'BlogCategory_Collection'][] {
        name,
        "slug": slug.current,
        "postCount": count(*[_type == "BlogPost_Collection" && references(^._id) && defined(category)]),
        ${PortableTextQuery('heading')}
      }
    `,
  })
}

export async function getStaticPaths() {
  const categories = await getCategoryData()
  return categories.flatMap(({ slug, postCount }) => {
    const totalPages = Math.ceil(postCount / ITEMS_PER_PAGE)
    return Array.from({ length: totalPages - 1 }, (_, i) => ({
      params: {
        category: slug.replace(slugPrefix, ''),
        page: (i + 2).toString(),
      },
    }))
  })
}

const categories = await getCategoryData()
const { category: _category, page: _page } = Astro.params
const category = categories.find(({ slug }) => slug === `${slugPrefix}${_category}`)
const currentPage = parseInt(_page)

const postCount = category?.postCount || 0
const totalPages = Math.ceil(postCount / ITEMS_PER_PAGE)
if (currentPage < 2 || currentPage > totalPages) return Astro.rewrite('/404')
if (!category) return Astro.rewrite('/404')

const page = await sanityFetch<{
  name: string
  slug: string
  hero: HeroProps
  listing: ListingProps
  components: ComponentsProps
}>({
  query: `
    *[_type == "Blog_Page"][0] {
      name,
      "slug": slug.current,
      ${Hero_Query}
      ${Listing_Query({ currentPage: currentPage, currentCategorySlug: category.slug })}
      ${Components_Query}
    }
  `,
})

const metadata = await metadataFetch(category.slug)
---

<Layout
  title={`${metadata.title} | Strona ${currentPage}`}
  description={metadata.description}
  openGraphImage={metadata.openGraphImage}
  path={Astro.url.pathname}>
  <Fragment slot="Head">
    {currentPage > 2 && <link rel="prev" href={`${DOMAIN}/pl/blog/strona/${currentPage - 1}`} />}
    {currentPage < totalPages && <link rel="next" href={`${DOMAIN}/pl/blog/strona/${currentPage + 1}`} />}
  </Fragment>
  <Breadcrumbs
    data={[
      { name: page.name, path: page.slug },
      { name: category.name, path: category.slug },
      { name: `Strona ${currentPage}`, path: `${category.slug}/strona/${currentPage}` },
    ]}
  />
  <PortableText value={category.heading} heading="h1" class="visually-hidden" />
  <Hero {...page.hero} />
  <Listing
    {...page.listing}
    currentPage={currentPage}
    totalItems={page.listing.totalPostsByCategory}
    currentCategorySlug={category.slug}
    slugBase={category.slug}
  />
  <Components data={page.components} hasPreviousSections={true} />
</Layout>
