---
import Form from './index.tsx'
import type { Props as ContactFormProps } from '../ContactForm.astro'
import Image from '@repo/ui/Image'
import Button from '@repo/ui/Button'
import Copy from '@repo/ui/Copy'
import Loader from '@repo/ui/Loader'
import PortableText from '@repo/ui/portable-text'

type Props = {
  state: ContactFormProps['state']
  variant: ContactFormProps['variant']
  email: ContactFormProps['email']
}

const { state, variant, email } = Astro.props as Props

const svgId = Math.random().toString(36).slice(2)
---

<Form className="Form" variant={variant} client:load>
  <div class="submit-wrapper">
    <div class="wrapper">
      {variant === 'form-with-list' && <Button type="submit" className="submit-button">Porozmawiajmy o biznesie</Button>}
      {
        variant === 'form-with-person' && (
          <button class="prev-step" type="button">
            <svg xmlns="http://www.w3.org/2000/svg" width="13" height="10" fill="none" viewBox="0 0 13 10">
              <path stroke="#F0F7F7" stroke-linecap="round" stroke-linejoin="round" d="M11.835 5H1.168m0 0 4-4m-4 4 4 4"/>
            </svg>
            Wróć
          </button>
          <Button type="button" className="next-step">
            Przejdź dalej
          </Button>
          <Button type="submit" className="submit-button">Porozmawiajmy o biznesie</Button>
        )
      }
    </div>
    <p class="secure-data">
      <svg xmlns="http://www.w3.org/2000/svg" width="17" height="16" fill="none" viewBox="0 0 17 16">
        <path
          stroke="#C6CDCC"
          d="M1.832 10.668c0-1.886 0-2.828.586-3.414.586-.586 1.528-.586 3.414-.586h5.333c1.886 0 2.829 0 3.415.586.585.586.585 1.528.585 3.414 0 1.886 0 2.828-.585 3.414-.586.586-1.529.586-3.415.586H5.832c-1.886 0-2.828 0-3.414-.586-.586-.586-.586-1.528-.586-3.414Z">
        </path>
        <circle cx="8.501" cy="10.665" r="1.333" stroke="#C6CDCC"></circle>
        <path stroke="#C6CDCC" stroke-linecap="round" d="M4.5 6.665V5.332a4 4 0 1 1 8 0v1.333"></path>
      </svg>
      Twoje dane są bezpieczne
    </p>
  </div>
  <Loader class="Loader" />
  <div class="SuccessState">
    <div class="icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="25" height="24" fill="none" viewBox="0 0 25 24">
        <circle cx="12.5" cy="12" r="10" stroke={`url(#ContactForm-Success-${svgId})`}></circle>
        <path stroke={`url(#ContactForm-Success1-${svgId})`} stroke-linejoin="round" d="m9 12.5 2 2 5-5"></path>
        <defs>
          <linearGradient
            id={`ContactForm-Success-${svgId}`}
            x1="22.125"
            x2="1.311"
            y1="2"
            y2="3.326"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#2DD282"></stop>
            <stop offset="1" stop-color="#90F4E8"></stop>
          </linearGradient>
          <linearGradient
            id={`ContactForm-Success1-${svgId}`}
            x1="15.869"
            x2="8.612"
            y1="9.5"
            y2="10.147"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#2DD282"></stop>
            <stop offset="1" stop-color="#90F4E8"></stop>
          </linearGradient>
        </defs>
      </svg>
    </div>
    <PortableText value={state.success.heading} class="h2 heading" />
    <PortableText value={state.success.paragraph} class="paragraph" />
    <a href={state.success.link.url} target="_blank" rel="noopener noreferrer" class="SuccessState-link">
      <div>
        <p class="heading">{state.success.link.heading}</p>
        <p class="paragraph">{state.success.link.paragraph}</p>
      </div>
      <Image {...state.success.link.img} sizes="80px" class="img" />
      <div class="icon">
        <Image {...state.success.link.icon} sizes="16px" />
      </div>
      <div class="glow"></div>
    </a>
  </div>
  <div class="ErrorState">
    <div class="icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
        <path
          stroke={`url(#ContactForm-Error-${svgId})`}
          stroke-width="1.5"
          d="M5.312 10.761C8.23 5.587 9.689 3 12 3c2.31 0 3.77 2.587 6.688 7.761l.364.645c2.425 4.3 3.638 6.45 2.542 8.022S17.786 21 12.364 21h-.728c-5.422 0-8.134 0-9.23-1.572s.117-3.722 2.542-8.022l.364-.645Z">
        </path>
        <path stroke={`url(#ContactForm-Error1-${svgId})`} stroke-linecap="round" stroke-width="1.5" d="M12 8v5"></path>
        <circle cx="12" cy="16" r="1" fill={`url(#ContactForm-Error2-${svgId})`}></circle>
        <defs>
          <linearGradient
            id={`ContactForm-Error-${svgId}`}
            x1="21.625"
            x2=".83"
            y1="3"
            y2="4.472"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#D44A84"></stop><stop offset=".521" stop-color="#DA2B53"></stop><stop offset="1" stop-color="#BF3A3A"></stop>
          </linearGradient>
          <linearGradient
            id={`ContactForm-Error1-${svgId}`}
            x1="12.981"
            x2="11.937"
            y1="8"
            y2="8.013"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#D44A84"></stop><stop offset=".521" stop-color="#DA2B53"></stop>
            <stop offset="1" stop-color="#BF3A3A"></stop>
          </linearGradient>
          <linearGradient
            id={`ContactForm-Error2-${svgId}`}
            x1="12.963"
            x2="10.881"
            y1="15"
            y2="15.133"
            gradientUnits="userSpaceOnUse">
            <stop stop-color="#D44A84"></stop><stop offset=".521" stop-color="#DA2B53"></stop>
            <stop offset="1" stop-color="#BF3A3A"></stop>
          </linearGradient>
        </defs>
      </svg>
    </div>
    <PortableText value={state.error.heading} class="h2 heading" />
    <PortableText value={state.error.paragraph} class="paragraph" />
    <div class="actions">
      <Button type="button" className="cta tryAgain">Spróbuj ponownie</Button>
      <a href={`mailto:${email}`} class="email">{email}</a>
      <Copy data={email} successMessage="Pomyślnie skopiowano adres e-mail" />
    </div>
  </div>
</Form>

<style lang="scss">
  .Form {
    position: relative;
    max-width: 26rem;
    display: flex;
    flex-direction: column;
    gap: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem);
    .submit-wrapper {
      display: grid;
      gap: 1rem;
      .wrapper {
        display: flex;
        gap: 1.25rem;
        align-items: center;
      }
      .prev-step {
        flex-shrink: 0;
        width: fit-content;
        display: grid;
        grid-template-columns: auto 1fr;
        gap: 0.5rem;
        align-items: center;
        font-size: var(--typography-body-m, 0.875rem);
        min-height: 2.75rem;
      }
      .next-step,
      .submit-button {
        flex-grow: 1;
      }
      .secure-data {
        display: inline-grid;
        grid-template-columns: auto 1fr;
        gap: 0.5rem;
        justify-self: center;
        align-items: center;
        font-size: var(--typography-body-s, 0.75rem);
        color: var(--neutral-400, #c6cdcc);
      }
    }
    .Loader {
      display: none;
    }
    .SuccessState,
    .ErrorState {
      display: none;
      padding: clamp(1.5rem, calc(2vw / 0.48), 2rem);
      border-radius: 0.25rem;
      .icon {
        width: clamp(2rem, calc(2.5vw / 0.48), 2.5rem);
        height: clamp(2rem, calc(2.5vw / 0.48), 2.5rem);
        border-radius: 50%;
        display: grid;
        place-items: center;
        svg {
          width: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem);
          height: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem);
        }
      }
      > .heading {
        font-size: var(--typography-body-2xl, 1.125rem);
        margin: 1.25rem 0 0.75rem;
      }
      > .paragraph {
        font-size: var(--typography-body-m, 0.875rem);
      }
    }
    .SuccessState {
      background: var(--primary-gradient-900);
      .icon {
        background-color: var(--primary-600, #042b2b);
      }
      .SuccessState-link {
        margin: calc(clamp(1.5rem, calc(2vw / 0.48), 2rem) * -1);
        margin-top: 2.25rem;
        padding: 0.38rem 0.38rem 0.38rem 1.5rem;
        border-radius: 0rem 0rem 0.25rem 0.25rem;
        border-top: 1px solid var(--primary-500, #064040);
        background: var(--primary-600, #042b2b);
        display: grid;
        grid-template-columns: 1fr auto;
        align-items: center;
        gap: 0.75rem;
        position: relative;
        z-index: 2;
        .glow {
          position: absolute;
          left: 0;
          top: 0;
          right: 0;
          bottom: 0;
          overflow: hidden;
          &::before {
            content: '';
            background-color: var(--primary-500, #064040);
            filter: blur(16px);
            width: 25%;
            aspect-ratio: 1/1;
            border-radius: 50%;
            position: absolute;
            left: 60%;
            top: 0%;
            transform: translate3d(-50%, -50%, 0);
            z-index: -1;
            opacity: 0;
            transition: opacity 800ms var(--easing);
          }
        }
        &:hover {
          .glow {
            &::before {
              opacity: 1;
            }
          }
        }
        .heading {
          font-size: var(--typography-body-xl, 1rem);
          margin-bottom: 0.38rem;
        }
        .paragraph {
          font-size: var(--typography-body-m, 0.875rem);
          color: var(--neutral-400, #c6cdcc);
        }
        .img {
          width: 80px;
          border-radius: 2px;
          background:
            linear-gradient(var(--neutral-900), var(--neutral-900)) padding-box,
            var(--primary-gradient-400) border-box;
          border: 1px solid rgba(0, 0, 0, 0);
        }
        .icon {
          position: absolute;
          top: 50%;
          right: -1rem;
          transform: translate(100%, -50%);
          border-radius: 0.25rem;
          border: 1px solid var(--primary-500, #064040);
          background-color: var(--primary-600, #042b2b);
          display: grid;
          place-items: center;
          img {
            width: 16px;
            height: 16px;
          }
          &::after {
            content: '';
            width: 4px;
            height: 4px;
            background: linear-gradient(45deg, var(--primary-500, #064040) 50%, var(--primary-600, #042b2b) 50%);
            position: absolute;
            left: 0;
            top: 50%;
            transform: translate(-50%, -50%) rotate(45deg);
          }
        }
      }
    }
    .ErrorState {
      border: 1px solid var(--error-600, #380713);
      background: var(--error-gradient-900);
      .icon {
        background-color: var(--error-600, #380713);
      }
      .actions {
        margin-top: 2.25rem;
        text-align: center;
        .cta {
          margin-bottom: 0.75rem;
          width: 100%;
        }
        .email {
          font-size: var(--typography-body-m, 0.875rem);
          margin-right: 0.38rem;
        }
      }
    }
    &[data-status='success'],
    &[data-status='error'] {
      :global(> label),
      .submit-wrapper {
        display: none;
      }
    }
    &[data-status='loading'] {
      .Loader {
        display: grid;
      }
    }
    &[data-status='success'] {
      .SuccessState {
        display: block;
      }
    }
    &[data-status='error'] {
      .ErrorState {
        display: block;
      }
    }

    &[data-variant='form-with-person'] {
      :global(> label) {
        transition: filter 500ms var(--easing);
        will-change: filter;
      }
      &[data-step='1'] {
        :global(> label:nth-child(2)),
        :global(> label:nth-child(3)) {
          filter: blur(8px);
          visibility: hidden;
          position: absolute;
        }
        .submit-wrapper {
          .submit-button,
          .prev-step {
            display: none;
          }
        }
      }
      &[data-step='2'] {
        :global(> label:nth-child(1)) {
          filter: blur(8px);
          visibility: hidden;
          position: absolute;
        }
        .submit-wrapper {
          .next-step {
            display: none;
          }
        }
      }
    }
  }
</style>

<script>
  document.querySelectorAll<HTMLDivElement>('.ContactForm').forEach((section) => {
    section.querySelector<HTMLButtonElement>('.tryAgain')!.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('Contact-TryAgain'))
    })
    if (section.dataset.variant === 'form-with-person') {
      section.querySelector<HTMLButtonElement>('.next-step')!.addEventListener('click', () => {
        document.dispatchEvent(new CustomEvent('Contact-NextStep'))
      })
      section.querySelector<HTMLButtonElement>('.prev-step')!.addEventListener('click', () => {
        document.dispatchEvent(new CustomEvent('Contact-PrevStep'))
      })
    }
  })
</script>
