---
import sanityFetch from '@/src/utils/sanity.fetch'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@/components/ui/image'
import CountUp from '@/components/ui/CountUp.astro'

export const DetailedInfoAndStats_Query = `
  _type == "DetailedInfoAndStats" => {
    ${ImageDataQuery('img')}
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    list[] {
      ${PortableTextQuery('heading')}
      ${PortableTextQuery('paragraph')}
    },
    stats[] {
      value,
      label,
    },
  },
`

type Props = {
  index: number
  sectionId?: string
  img?: ImageDataProps
  heading: PortableTextValue
  paragraph: PortableTextValue
  list?: Array<{
    heading: PortableTextValue
    paragraph: PortableTextValue
  }>
  stats?: Array<{
    value: string
    label: string
  }>
}

const { index, sectionId, img, heading, paragraph, list, stats } = Astro.props

const data = await sanityFetch<{
  sector: string
  client: string
  categories: Array<{
    name: string
    slug: string
  }>
  date: Date
}>({
  query: `
    *[_type == 'CaseStudy_Collection' && slug.current == $slug][0] {
      sector,
      client,
      categories[] -> {
        name,
        "slug": slug.current,
      },
      date,
    }
  `,
  params: { slug: Astro.url.pathname },
})
---

<section class="DetailedInfoAndStats" id={sectionId}>
  {img && <Image {...img} sizes="100vw" priority={index === 0} />}
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading h2" />
    <PortableText value={paragraph} />
    {
      list && (
        <div class="show-more">
          <button aria-expanded="false" aria-controls="expandable-list">
            Dowiedz się więcej
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none">
              <path
                stroke="url(#DetailedInfoAndStats)"
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M8 2.668v10.667m0 0 4-4m-4 4-4-4"
              />
              <defs>
                <linearGradient
                  id="DetailedInfoAndStats"
                  x1="11.85"
                  x2="3.509"
                  y1="2.668"
                  y2="3.066"
                  gradientUnits="userSpaceOnUse">
                  <stop stop-color="#2DD282" />
                  <stop offset="1" stop-color="#90F4E8" />
                </linearGradient>
              </defs>
            </svg>
          </button>
          <div id="expandable-list" class="list" style="height: 0;">
            {list.map(({ heading, paragraph }) => (
              <div class="item">
                <PortableText value={heading} class="heading" />
                <PortableText value={paragraph} />
              </div>
            ))}
          </div>
        </div>
      )
    }
    {
      stats && (
        <ul class="stats">
          {stats.map(({ value, label }) => (
            <li class="stat">
              <CountUp class="value">{value}</CountUp>
              <p class="label">{label}</p>
            </li>
          ))}
        </ul>
      )
    }
  </header>
  {
    data && (
      <ul class="info">
        {data.sector && (
          <li class="info-item">
            <p>Sektor</p>
            <p>{data.sector}</p>
          </li>
        )}
        {data.client && (
          <li class="info-item">
            <p>Klient</p>
            <p>{data.client}</p>
          </li>
        )}
        <li class="info-item">
          <p>Rok</p>
          <p>{new Date(data.date).getFullYear()}</p>
        </li>
        <li class="info-item">
          <p>Usługi</p>
          <ul class="categories">
            {data.categories.map(({ name, slug }) => (
              <li class="category">
                <a href={slug}>{name}</a>
              </li>
            ))}
          </ul>
        </li>
      </ul>
    )
  }
</section>

<style lang="scss">
  .DetailedInfoAndStats {
    padding: clamp(3rem, calc(5vw / 0.48), 7rem) 0;
    display: grid;
    grid-template-columns: 1fr auto;
    justify-content: space-between;
    gap: clamp(2rem, calc(3vw / 0.48), 3rem);
    img {
      margin: 0 calc(var(--page-margin) * -1);
      max-width: calc(100% + var(--page-margin) * 2);
      grid-column: 1/3;
    }
    header {
      max-width: 38rem;
      .heading {
        max-width: 33rem;
        margin-bottom: 1rem;
      }
      .show-more {
        border-bottom: 1px solid var(--primary-500, #064040);
        font-size: var(--typography-body-m, 0.875rem);
        button {
          display: grid;
          grid-template-columns: 1fr auto;
          gap: 0.5rem;
          align-items: center;
          min-height: 2.75rem;
          margin: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem) 0;
          perspective: 100px;
          svg {
            transition: transform 800ms var(--easing);
          }
          &[aria-expanded='true'] {
            svg {
              transform: rotateX(180deg);
            }
          }
        }
        .list {
          overflow: hidden;
          transition: height 800ms var(--easing);
          .item {
            &:not(:last-child) {
              margin-bottom: clamp(1.5rem, calc(2.25vw / 0.48), 2.25rem);
            }
            &:last-child {
              margin-bottom: clamp(1.5rem, calc(2vw / 0.48), 2rem);
            }
            .heading {
              color: var(--neutral-400, #c6cdcc);
              margin-bottom: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
            }
          }
        }
      }
      .stats {
        margin-top: clamp(2rem, calc(3vw / 0.48), 4rem);
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        .stat {
          width: calc(50% - 0.75rem);
          max-width: 12rem;
        }
        .value {
          font-size: var(--typography-heading-l, 1.5rem);
          margin-bottom: clamp(0.25rem, calc(0.5vw / 0.48), 0.5rem);
        }
        .label {
          font-size: var(--typography-body-m, 0.875rem);
          color: var(--neutral-400, #c6cdcc);
        }
      }
    }
    .info {
      margin-left: auto;
      max-width: 18rem;
      font-size: var(--typography-body-m, 0.875rem);
      $gap: clamp(1rem, calc(1vw / 0.48), 2rem);
      gap: $gap;
      margin-bottom: calc($gap * -1);
      .info-item {
        break-inside: avoid;
        margin-bottom: $gap;
        p:first-child {
          color: var(--neutral-400, #c6cdcc);
          margin-bottom: 0.125rem;
        }
        ul {
          display: grid;
          gap: 0.25rem;
        }
      }
    }
    @media (max-width: 47rem) {
      grid-template-columns: 1fr;
      img {
        grid-column: unset;
      }
      .info {
        margin-left: 0;
        columns: 2;
        max-width: unset;
      }
    }
  }
</style>

<script>
  document.querySelectorAll('.DetailedInfoAndStats').forEach((section) => {
    const showMoreList = section.querySelector<HTMLDivElement>('.show-more .list')
    if (!showMoreList) return
    const showMoreBtn = section.querySelector<HTMLButtonElement>('.show-more button')!
    let timeout: ReturnType<typeof setTimeout>
    showMoreBtn.addEventListener('click', () => {
      const isExpanded = showMoreBtn.getAttribute('aria-expanded') === 'true'
      const targetHeight = isExpanded ? 0 : showMoreList.scrollHeight
      clearTimeout(timeout)
      showMoreList.style.height = `${showMoreList.scrollHeight}px`
      showMoreList.offsetHeight
      showMoreList.style.height = `${targetHeight}px`
      showMoreBtn.setAttribute('aria-expanded', (!isExpanded).toString())
      if (!isExpanded) {
        timeout = setTimeout(() => {
          showMoreList.style.height = 'auto'
        }, 800)
      }
    })
  })
</script>
