---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@/components/ui/image'
import Video, { VideoDataQuery, type VideoDataProps } from '@/components/ui/Video.astro'

export const MediaShowcase_Query = `
  _type == "MediaShowcase" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    layout,
    media[] {
      _type,
      _type == "image" => ${ImageDataQuery('@')}
      _type == "video" => {
        hasUi,
        ${VideoDataQuery('asset')}
      },
    },
  },
`

type Props = {
  index: number
  sectionId?: string
  heading?: PortableTextValue
  paragraph?: PortableTextValue
  layout: '50/50' | '30/70' | '70/30'
  media: Array<
    | {
        _type: 'image'
        image: ImageDataProps
      }
    | {
        _type: 'video'
        hasUi: boolean
        asset: VideoDataProps
      }
  >
}

const { index, sectionId, heading, paragraph, layout, media } = Astro.props as Props
---

<section class="MediaShowcase" id={sectionId}>
  {
    media && (
      <div class="media-wrapper" data-items={media.length} data-layout={media.length === 2 ? layout : null}>
        {media?.map((item, mediaIndex) =>
          item._type === 'image' ? (
            <Image
              {...(item as unknown as ImageDataProps)}
              sizes={
                media.length === 1
                  ? '100vw'
                  : media.length === 2
                    ? layout === '50/50'
                      ? '(max-width: 24rem) 100vw, 50vw'
                      : layout === '30/70'
                        ? mediaIndex === 0
                          ? '(max-width: 24rem) 100vw, 30vw'
                          : '(max-width: 24rem) 100vw, 70vw'
                        : mediaIndex === 0
                          ? '(max-width: 24rem) 100vw, 70vw'
                          : '(max-width: 24rem) 100vw, 30vw'
                    : '(max-width: 28rem) 100vw, 33vw'
              }
              class="media"
              priority={index === 0 && mediaIndex === 0}
              loading={index === 0 ? 'eager' : 'lazy'}
            />
          ) : (
            <Video {...item.asset} hideControls={!item.hasUi} class="media" />
          )
        )}
      </div>
    )
  }
  {
    heading && (
      <header>
        <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
        {paragraph && <PortableText value={paragraph} class="paragraph" />}
      </header>
    )
  }
</section>

<style lang="scss">
  .MediaShowcase {
    padding: clamp(2rem, calc(3vw / 0.48), 3rem) 0;
    header {
      margin-top: clamp(1.5rem, calc(2vw / 0.48), 2rem);
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: clamp(1.5rem, calc(3vw / 0.48), 3rem) 1.5rem;
      .heading {
        font-size: var(--typography-body-xl, 1rem);
        color: var(--neutral-400, #c6cdcc);
      }
    }
    .media-wrapper {
      margin: 0 calc(var(--page-margin) * -1);
      display: grid;
      .media {
        height: 100%;
      }
      &[data-items='1'] {
        grid-template-columns: 1fr;
      }
      &[data-items='2'] {
        grid-template-columns: 1fr 1fr;
        &[data-layout='30/70'] {
          grid-template-columns: 1fr 2fr;
        }
        &[data-layout='70/30'] {
          grid-template-columns: 2fr 1fr;
        }
      }
      &[data-items='3'] {
        grid-template-columns: 1fr 1fr 1fr;
      }
    }
    @media (max-width: 43rem) {
      header {
        grid-template-columns: 1fr;
      }
    }
    @media (max-width: 28rem) {
      .media-wrapper {
        &[data-items='3'] {
          grid-template-columns: 1fr;
        }
      }
    }
    @media (max-width: 24rem) {
      .media-wrapper {
        &[data-items='2'] {
          grid-template-columns: 1fr !important;
        }
      }
    }
  }
</style>
