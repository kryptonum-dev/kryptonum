---
import Image, { ImageDataQuery, type ImageDataProps } from '@repo/ui/Image'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@repo/ui/Button'

export const StackImagesWithCtaAndAvatars_Query = `
  _type == "StackImagesWithCtaAndAvatars" => {
    ${ImageDataQuery('images[]')}
    ${PortableTextQuery('heading')}
    ${ButtonDataQuery('cta')}
    ${ImageDataQuery('avatars[]')}
  },
`

type Props = {
  index: number
  sectionId?: string
  images: ImageDataProps[]
  heading: PortableTextValue
  cta: ButtonDataProps
  avatars?: ImageDataProps[]
}

const { index, sectionId, images, heading, cta, avatars } = Astro.props
---

<section class="StackImagesWithCtaAndAvatars" id={sectionId}>
  <div class="images">
    {images?.map((image) => <Image {...image} sizes="(max-width: 69rem) 50vw, 20vw" />)}
  </div>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
    <div class="wrapper">
      <Button {...cta} />
      {
        avatars && (
          <div class="avatars">
            {avatars.map((avatar) => (
              <Image {...avatar} sizes="32px" />
            ))}
          </div>
        )
      }
    </div>
  </header>
</section>

<style lang="scss">
  $gap: clamp(0.75rem, calc(1vw / 0.48), 1.25rem);
  .StackImagesWithCtaAndAvatars {
    padding: clamp(3rem, calc(4vw / 0.48), 5rem) 0;
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: $gap;
    align-items: flex-end;
    .images {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr;
      gap: $gap;
      align-items: flex-end;
      img {
        border-radius: 0.25rem;
        border: 1px solid var(--neutral-600, rgb(74, 74, 87));
      }
    }
    header {
      text-align: center;
      border-radius: 0.25rem;
      border: 1px solid var(--neutral-600, rgb(74, 74, 87));
      padding: 1.5rem clamp(1rem, calc(1.5vw / 0.48), 2rem);
      .heading {
        font-size: var(--typography-body-xl, 1rem);
        margin-bottom: clamp(1rem, calc(1.25vw / 0.48), 2rem);
      }
      .wrapper {
        display: flex;
        flex-wrap: wrap;
        flex-direction: row-reverse;
        align-items: center;
        justify-content: center;
        gap: clamp(0.5rem, calc(1vw / 0.48), 1rem);
      }
      .avatars {
        display: flex;
        img {
          width: 32px;
          height: 32px;
          border-radius: 50%;
          border: 1px solid var(--neutral-700, #383842);
          background-color: var(--neutral-900, rgba(0, 1, 3, 1));
          &:not(:first-child) {
            margin-left: -8px;
          }
        }
      }
    }
    @media (max-width: 69rem) {
      grid-template-columns: 1fr;
      max-width: 38rem;
      margin: 0 auto;
      .images {
        grid-template-columns: 1fr 1fr;
        img {
          &:nth-child(2) {
            order: 1;
          }
          &:nth-child(4) {
            order: 2;
          }
        }
      }
    }
  }
</style>
