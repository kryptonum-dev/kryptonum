---
import Image, { ImageDataQuery, type ImageDataProps } from '@/components/ui/image'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'

export const SkillsAndLinks_Query = `
  _type == "SkillsAndLinks" => {
    ${PortableTextQuery('heading')}
    list[] {
      ${ImageDataQuery('icon')}
      label,
    },
    ${PortableTextQuery('paragraph')}
    linksText,
    links[] {
      ${ImageDataQuery('icon')}
      link,
      name,
    },
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  list: Array<{
    icon?: ImageDataProps
    label: string
  }>
  paragraph: PortableTextValue
  linksText: string
  links: Array<{
    icon: ImageDataProps
    link: string
    name: string
  }>
}

const { index, sectionId, heading, list, paragraph, linksText, links } = Astro.props
---

<section class="SkillsAndLinks" id={sectionId}>
  <div>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading h2" />
    <ul class="list">
      {
        list.map(({ icon, label }) => (
          <li>
            {icon && <Image {...icon} sizes="32px" />}
            {label}
          </li>
        ))
      }
    </ul>
  </div>
  <div class="line" role="separator"></div>
  <div>
    <PortableText value={paragraph} class="paragraph" />
    <div class="links">
      <p>{linksText}</p>
      <ul>
        {
          links.map(({ icon, link, name }) => (
            <li>
              <a href={link} target="_blank" rel="noopener noreferrer" aria-label={`PrzejdÅº do ${name}`}>
                <Image {...icon} sizes="32px" />
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </div>
</section>

<style lang="scss">
  .SkillsAndLinks {
    padding: clamp(3rem, calc(5vw / 0.48), 6rem) 0;
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    .heading {
      margin-bottom: clamp(1.5rem, calc(2vw / 0.48), 2rem);
    }
    .list {
      display: flex;
      flex-wrap: wrap;
      gap: 1rem 1.5rem;
      li {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        img {
          width: 1.25rem;
          height: 1.25rem;
          object-fit: contain;
        }
      }
    }
    .line {
      width: 1px;
      height: calc(100% + 4rem);
      background-color: var(--neutral-800, #4a4a57);
      margin: -2rem clamp(3rem, calc(4vw / 0.48), 7rem) 0 2rem;
    }
    .paragraph {
      margin-bottom: clamp(2rem, calc(3vw / 0.48), 4rem);
    }
    .links {
      margin-top: auto;
      text-align: right;
      margin-left: auto;
      p {
        margin-bottom: 1rem;
      }
      ul {
        border-radius: 6rem;
        border: 1px solid var(--neutral-600, #4a4a57);
        padding: 0.625rem;
        display: inline-flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 0.25rem;
        li {
          a {
            width: 4rem;
            height: 4rem;
            border-radius: 50%;
            border: 1px solid var(--neutral-600, #4a4a57);
            display: grid;
            place-items: center;
            transition:
              transform 500ms var(--easing),
              border-color 500ms var(--easing);
            &:hover {
              border-color: var(--neutral-500, #75758a);
            }
            &:active {
              transition: none;
              transform: scale(0.98);
            }
          }
          img {
            width: 1.5rem;
            height: 1.5rem;
            object-fit: contain;
          }
        }
      }
    }
    @media (max-width: 62rem) {
      max-width: 38rem;
      margin: 0 auto;
      grid-template-columns: unset;
      .line {
        width: 100%;
        height: 1px;
        margin: 2rem 0 clamp(3rem, calc(4vw / 0.48), 4rem);
      }
    }
  }
</style>
