---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@/components/ui/Button'

export const PricingRange_Query = `
  _type == "PricingRange" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    range {
      from,
      to,
    },
    ${PortableTextQuery('factorsParagraph')}
    factors[],
    ${ButtonDataQuery('cta')}
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  range: {
    from: string
    to: string
  }
  factorsParagraph?: PortableTextValue
  factors: string[]
  cta?: ButtonDataProps
}

const { index, sectionId, heading, paragraph, range, factorsParagraph, factors, cta } = Astro.props
---

<object style="display: none;">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="16"
    height="16"
    fill="none"
    viewBox="0 0 16 16"
    id="PricingRange-factor">
    <path
      fill="#F0F7F7"
      fill-rule="evenodd"
      d="M13.687 6.915c-.247-.428-.7-.568-1.132-.629-.436-.06-1.02-.06-1.725-.06h-.04c-.42 0-.695-.005-.895-.033-.18-.025-.238-.062-.263-.084-.018-.018-.05-.062-.072-.22-.026-.187-.027-.442-.027-.851v-.25c0-1.058 0-1.906-.081-2.51-.076-.568-.258-1.205-.888-1.398-.618-.19-1.137.217-1.54.636-.43.446-.94 1.136-1.578 2l-2.092 2.83c-.407.55-.746 1.01-.948 1.389-.203.38-.35.832-.125 1.283v.001l.003.005.003.005.002.005.003.006.003.005.003.005.003.006.003.004v.002c.246.424.696.573 1.133.64.45.068 1.05.072 1.777.072.424 0 .695.001.893.027.176.022.228.056.25.076.02.021.056.07.08.233.029.188.033.447.033.852v.25c0 1.058 0 1.906.082 2.51.076.568.258 1.205.887 1.398.619.19 1.137-.217 1.54-.636.43-.446.94-1.137 1.579-2.001l2.066-2.796c.42-.568.766-1.044.97-1.44.2-.387.34-.84.117-1.287l-.001-.002-.003-.005-.002-.005-.003-.005-.003-.006-.003-.005-.002-.005-.004-.005-.002-.005-.001-.002ZM7.745 2.21c-.379.394-.85 1.03-1.52 1.936L4.184 6.907c-.439.593-.732.992-.895 1.298-.08.149-.11.243-.118.3-.005.035-.002.05.002.061.016.024.086.097.415.147.358.054.874.061 1.626.061h.03c.385 0 .72 0 .99.035.289.036.575.12.813.344l.004.003.004.004c.233.229.328.513.371.802.042.276.044.615.044 1v.206c0 1.112.001 1.891.073 2.42.035.264.083.419.129.505.034.065.054.07.06.07l.001.001c.007.002.032.01.107-.027.095-.048.23-.15.419-.347.379-.393.85-1.03 1.52-1.935l2.041-2.762c.436-.59.726-.995.886-1.304.136-.264.121-.354.112-.378-.015-.022-.082-.09-.402-.134-.358-.05-.87-.052-1.626-.052-.402 0-.75-.002-1.033-.041-.29-.04-.578-.128-.814-.35l-.004-.003-.004-.004c-.235-.231-.326-.515-.365-.801-.037-.263-.037-.589-.037-.956V4.83c0-1.111 0-1.89-.072-2.42-.036-.264-.083-.418-.13-.505-.033-.064-.053-.069-.059-.07H8.27c-.007-.003-.031-.011-.107.027-.095.048-.23.15-.418.346Z"
      clip-rule="evenodd">
    </path>
  </svg>
</object>
<section class="PricingRange" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading h2" />
    <PortableText value={paragraph} class="paragraph" />
    <div class="range">
      <p class="from">{range.from}</p>
      <div class="line"></div>
      <p class="to">{range.to}</p>
    </div>
  </header>
  <div class="content">
    {factorsParagraph && <PortableText value={factorsParagraph} class="paragraph" />}
    <ul class="factors">
      {
        factors.map((factor) => (
          <li class="factor">
            <div class="icon">
              <svg width="16" height="16">
                <use href="#PricingRange-factor" />
              </svg>
            </div>
            <span>{factor}</span>
          </li>
        ))
      }
    </ul>
    {cta && <Button {...cta} className="cta" />}
  </div>
</section>

<style lang="scss">
  .PricingRange {
    padding: clamp(4rem, calc(5vw / 0.48), 6rem) 0;
    display: grid;
    justify-content: space-between;
    gap: clamp(2.5rem, calc(4vw / 0.48), 8rem);
    grid-template-columns: auto auto;
    header {
      max-width: 26rem;
      .paragraph {
        margin: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem) 0;
        font-size: var(--typography-body-m, 0.875rem);
      }
      .range {
        display: grid;
        grid-template-columns: auto 1fr auto;
        align-items: center;
        gap: 0.25rem;
        p {
          display: inline-flex;
          font-size: var(--typography-body-m, 0.875rem);
          padding: 0.25rem 0.75rem;
          border-radius: 2rem;
          border: 1px solid var(--primary-500, #064040);
          background-color: var(--primary-600, #042b2b);
          position: relative;
          &::before {
            content: '';
            position: absolute;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 0.3125rem;
            height: 0.3125rem;
            border-radius: 50%;
            background-color: var(--primary-500, #064040);
          }
          &.from {
            &::before {
              left: 100%;
            }
          }
          &.to {
            &::before {
              left: 0;
            }
          }
        }
        .line {
          height: 1px;
          border-bottom: 1px dashed var(--primary-500, #064040);
        }
      }
    }
    .content {
      width: 100%;
      max-width: 26rem;
      .paragraph {
        font-size: var(--typography-body-m, 0.875rem);
        margin-bottom: clamp(1.25rem, calc(1.5vw / 0.48), 1.5rem);
      }
      .factors {
        display: grid;
        gap: 0.5rem;
        .factor {
          display: grid;
          grid-template-columns: auto 1fr;
          gap: 0.75rem;
          .icon {
            width: 2.25rem;
            height: 2.25rem;
            border-radius: 0.25rem;
            border: 1px solid var(--primary-500, #064040);
            background-color: var(--primary-600, #042b2b);
            display: grid;
            place-content: center;
          }
          span {
            margin-top: 0.28rem;
          }
        }
      }
      .cta {
        margin-top: clamp(2rem, calc(3vw / 0.48), 3rem);
      }
    }
    @media (max-width: 56rem) {
      max-width: 28rem;
      grid-template-columns: 1fr;
      header {
        max-width: 100%;
      }
      .content {
        max-width: 100%;
      }
    }
  }
</style>
