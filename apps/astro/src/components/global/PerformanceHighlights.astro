---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@/components/ui/image'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@/components/ui/cta'
import CountUp from '@/components/ui/CountUp.astro'

export const PerformanceHighlights_Query = `
  _type == "PerformanceHighlights" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    metrics[] {
      value,
      label,
    },
    ${ButtonDataQuery('cta')}
    ${ImageDataQuery('img')}
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  metrics: Array<{
    value: string
    label: string
  }>
  cta: ButtonDataProps
  img: ImageDataProps
}

const { index, sectionId, heading, paragraph, metrics, cta, img } = Astro.props
---

<section class="PerformanceHighlights" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading h2" />
    <PortableText value={paragraph} class="paragraph" />
    <ul class="metrics">
      {
        metrics.map(({ value, label }) => (
          <li class="metric">
            <CountUp class="value">{value}</CountUp>
            <p class="label">{label}</p>
          </li>
        ))
      }
    </ul>
    <Button {...cta} />
  </header>
  <Image {...img} sizes="(max-width: 43rem) 90vw, 40vw" class="img" />
</section>

<style lang="scss">
  .PerformanceHighlights {
    margin: clamp(3rem, calc(4vw / 0.48), 5rem) auto;
    border-radius: 0.5rem;
    background: linear-gradient(180deg, rgba(0, 0, 0, 0), rgba(8, 49, 32, 0.15), rgba(5, 42, 27, 0.6));
    padding: clamp(1rem, calc(3vw / 0.48), 3rem) clamp(1rem, calc(4vw / 0.48), 4rem);
    display: grid;
    grid-template-columns: 1fr 1.2fr;
    align-items: center;
    gap: clamp(2rem, calc(3vw / 0.48), 6rem);
    header {
      max-width: 26rem;
      .heading {
        margin-bottom: 1rem;
      }
      .paragraph {
        font-size: var(--typography-body-m, 0.875rem);
      }
      .metrics {
        margin: clamp(1.75rem, calc(2.5vw / 0.48), 3rem) 0;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: clamp(1rem, calc(1.25vw / 0.48), 1.25rem);
        .value {
          font-size: var(--typography-heading-l, 1.375rem);
          margin-bottom: 0.25rem;
        }
        .label {
          font-size: var(--typography-body-m, 0.875rem);
          color: var(--neutral-400, #c6cdcc);
        }
      }
    }
    img {
      border-radius: 0.25rem;
      background:
        linear-gradient(var(--neutral-900), var(--neutral-900)) padding-box,
        linear-gradient(266deg, #05432d66, #05503566, #1f6644, #11353133) border-box;
      border: 1px solid rgba(255, 255, 255, 0);
    }
    @media (max-width: 74rem) {
      grid-template-columns: 1fr;
      max-width: 38rem;
      header {
        max-width: unset;
      }
    }
    @media (max-width: 38rem) {
      padding: 1rem;
    }
    @media (max-width: 31rem) {
      header {
        .metrics {
          grid-template-columns: 1fr;
        }
      }
    }
  }
</style>
