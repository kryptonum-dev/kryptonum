---
import BlogCard, { BlogCard_Query, type Props as BlogCardProps } from '@components/shared/BlogCard.astro'
import CategoryTab from '@repo/ui/CategoryTab'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Pagination from '@repo/ui/Pagination'
import { ITEMS_PER_PAGE } from '@pages/pl/blog.astro'

export const Listing_Query = ({
  currentPage = 1,
  currentCategorySlug = '',
}: {
  currentPage?: number
  currentCategorySlug?: string
}) => {
  const OFFSET = ITEMS_PER_PAGE * (currentPage - 1)
  const PAGINATION_BEFORE = OFFSET
  const PAGINATION_AFTER = OFFSET + ITEMS_PER_PAGE
  return `
    listing {
      ${PortableTextQuery('heading')}
      "totalBlogPosts": count(*[_type == 'BlogPost_Collection' && language == $language]),
      "totalPostsByCategory": count(*[_type == 'BlogPost_Collection' ${currentCategorySlug ? `&& category -> slug.current == "${currentCategorySlug}"` : ''} && language == $language]),
      "categories": *[_type == 'BlogCategory_Collection' && language == $language] {
        name,
        "slug": slug.current,
        "count": count(*[_type == 'BlogPost_Collection' && references(^._id) && defined(category)])
      },
      "listing": *[_type == 'BlogPost_Collection' && language == $language
        ${currentCategorySlug ? `&& category -> slug.current == "${currentCategorySlug}"` : ''}
      ] | order(coalesce(publishedDate, _createdAt) desc) [${PAGINATION_BEFORE}...${PAGINATION_AFTER}] {
        ${BlogCard_Query}
      },
    },
  `
}

export type ListingProps = {
  heading: PortableTextValue
  totalBlogPosts: number
  totalPostsByCategory: number
  categories: Array<{
    name: string
    slug: string
    count: number
  }>
  listing: Array<BlogCardProps>
  currentCategorySlug?: string
  currentPage: number
  totalItems: number
  slugBase: string
}

const {
  heading,
  totalBlogPosts,
  categories: _categories,
  listing,
  currentCategorySlug,
  currentPage,
  totalItems,
  slugBase,
} = Astro.props as ListingProps

const categories = _categories?.filter(({ count }) => count > 0)
---

<section class="Listing" id="strona">
  <header>
    <PortableText value={heading} heading="h2" />
  </header>
  <div class="categories">
    <p>Kategorie</p>
    <ul>
      <li>
        <CategoryTab slug="/pl/blog#strona" isActive={!currentCategorySlug}>
          Wszystkie ({totalBlogPosts})
        </CategoryTab>
      </li>
      {
        categories.map((category) => {
          const isActive = currentCategorySlug === category.slug
          return (
            <li>
              <CategoryTab slug={isActive ? '/pl/blog#strona' : `${category.slug}#strona`} isActive={isActive}>
                {category.name} ({category.count})
              </CategoryTab>
            </li>
          )
        })
      }
    </ul>
  </div>
  <div class="listing">
    {
      listing?.map((post) => (
        <BlogCard {...post} imgProps={{ sizes: '(max-width: 47rem) 100vw, (max-width: 63rem) 50vw, 34vw' }} />
      ))
    }
  </div>
  <Pagination currentPage={currentPage} totalItems={totalItems} itemsPerPage={ITEMS_PER_PAGE} slugBase={slugBase} />
</section>

<style lang="scss">
  .Listing {
    padding: clamp(3rem, calc(4vw / 0.48), 5rem) 0;
    header {
      max-width: 24rem;
      h2 {
        margin-bottom: clamp(2rem, calc(3vw / 0.48), 3rem);
      }
    }
    .categories {
      padding-bottom: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
      margin-bottom: 2rem;
      border-bottom: 1px solid var(--neutral-600, #4a4a57);
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem 2.5rem;
      align-items: center;
      p {
        font-size: var(--typography-body-m, 0.875rem);
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }
    }
    .listing {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: clamp(0.75rem, calc(0.75vw / 0.48), 1.25rem);
      @media (max-width: 63rem) {
        grid-template-columns: 1fr 1fr;
      }
      @media (max-width: 47rem) {
        grid-template-columns: 1fr;
      }
    }
  }
</style>

<style is:global>
  html {
    scroll-behavior: auto;
  }
</style>
