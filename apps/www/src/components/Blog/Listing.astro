---
import BlogCard, { BlogCard_Query, type Props as BlogCardProps } from '@components/shared/BlogCard.astro'
import CategoryTab from '@repo/ui/CategoryTab.astro'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Pagination from '@repo/ui/Pagination.astro'
import { ITEMS_PER_PAGE } from '@templates/blog/index.astro'
import { PAGE_LABEL } from '@repo/ui/Pagination.astro'
import { type Language } from '@repo/shared/languages'

type Props = {
  heading: PortableTextValue
  totalBlogPosts: number
  totalPostsByCategory: number
  categories: Array<{
    name: string
    slug: string
    count: number
  }>
  listing: Array<BlogCardProps>
  currentPage: number
  currentCategory: string | null
}
export type ListingProps = Props

const lang = Astro.params.lang as Language
const translations = {
  pl: {
    categories: 'Kategorie',
    all: 'Wszystkie',
  },
  en: {
    categories: 'Categories',
    all: 'All',
  },
} as const

export const Listing_Query = `
  listing {
    ${PortableTextQuery('heading')}
    "totalBlogPosts": count(*[_type == 'BlogPost_Collection' && language == $language]),
    "categories": *[_type == 'BlogCategory_Collection' && language == $language && count(*[_type == 'BlogPost_Collection' && references(^._id) && defined(category)]) > 0] {
      name,
      "slug": slug.current,
      "count": count(*[_type == 'BlogPost_Collection' && references(^._id) && defined(category)])
    },
    "totalPostsByCategory": count(*[_type == 'BlogPost_Collection'
      && language == $language
      && select(
        defined($category) => category -> slug.current match $category + "$",
        true
      )
    ]),
    "listing": *[_type == 'BlogPost_Collection'
      && language == $language
      && select(defined($category) => category -> slug.current match $category + "$", true)
    ] | order(coalesce(publishedDate, _createdAt) desc) [$PAGINATION_BEFORE...$PAGINATION_AFTER] {
      ${BlogCard_Query}
    },
  },
`

const { heading, totalBlogPosts, categories, totalPostsByCategory, listing, currentPage, currentCategory } = Astro.props
const slugBase = (() => {
  const categoryPath = currentCategory ? `/${lang === 'pl' ? 'kategoria' : 'category'}/${currentCategory}` : ''
  return `${lang === 'pl' ? '/pl' : '/en'}/blog${categoryPath}`
})()
---

<section class="Listing" id={PAGE_LABEL[lang]}>
  <header>
    <PortableText value={heading} heading="h2" />
  </header>
  <div class="categories">
    <p>{translations[lang].categories}</p>
    <ul>
      <li>
        <CategoryTab slug={`/${lang}/blog#${PAGE_LABEL[lang]}`} isActive={!currentCategory}>
          {translations[lang].all} ({totalBlogPosts})
        </CategoryTab>
      </li>
      {
        categories.map((category) => {
          const isActive = currentCategory ? category.slug.endsWith(currentCategory) : false
          return (
            <li>
              <CategoryTab slug={`${category.slug}#${PAGE_LABEL[lang]}`} isActive={isActive}>
                {category.name} ({category.count})
              </CategoryTab>
            </li>
          )
        })
      }
    </ul>
  </div>
  <div class="listing">
    {
      listing?.map((post) => (
        <BlogCard {...post} imgProps={{ sizes: '(max-width: 47rem) 100vw, (max-width: 63rem) 50vw, 34vw' }} />
      ))
    }
  </div>
  <Pagination
    slugBase={slugBase}
    totalItems={totalPostsByCategory}
    itemsPerPage={ITEMS_PER_PAGE}
    currentPage={currentPage}
  />
</section>

<style lang="scss">
  :global(html) {
    scroll-behavior: auto;
  }
  .Listing {
    padding: clamp(3rem, calc(4vw / 0.48), 5rem) 0;
    header {
      max-width: 24rem;
      h2 {
        margin-bottom: clamp(2rem, calc(3vw / 0.48), 3rem);
      }
    }
    .categories {
      padding-bottom: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
      margin-bottom: 2rem;
      border-bottom: 1px solid var(--neutral-600, #4a4a57);
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem 2.5rem;
      align-items: center;
      p {
        font-size: var(--typography-body-m, 0.875rem);
      }
      ul {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }
    }
    .listing {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr;
      gap: clamp(0.75rem, calc(0.75vw / 0.48), 1.25rem);
      @media (max-width: 63rem) {
        grid-template-columns: 1fr 1fr;
      }
      @media (max-width: 47rem) {
        grid-template-columns: 1fr;
      }
    }
  }
</style>
