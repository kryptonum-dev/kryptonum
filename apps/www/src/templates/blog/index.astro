---
import Layout from '@repo/shared/layout/Layout.astro'
import sanityFetch from '@repo/utils/sanity.fetch'
import metadataFetch from '@repo/utils/metadata.fetch'
import Breadcrumbs from '@repo/ui/Breadcrumbs.astro'
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Hero, { Hero_Query, type HeroProps } from '@components/Blog/Hero.astro'
import Listing, { Listing_Query, type ListingProps } from '@components/Blog/Listing.astro'
import Components, { Components_Query, type ComponentsProps } from '@repo/shared/components/index.astro'
import { type Language } from '@repo/shared/languages'

export const ITEMS_PER_PAGE = 12

type Props = NonNullable<Awaited<ReturnType<typeof fetchData>>> & {
  currentPage: number
  currentCategory: string | null
}

export async function fetchData(lang: Language, category: string | null, pageNumber: number) {
  const PAGINATION_BEFORE = ITEMS_PER_PAGE * (pageNumber - 1)
  const PAGINATION_AFTER = PAGINATION_BEFORE + ITEMS_PER_PAGE
  const page = await sanityFetch<{
    name: string
    slug: string
    heading: PortableTextValue
    selectedCategory?: {
      name: string
      slug: string
      heading: PortableTextValue
    }
    hero: HeroProps
    listing: ListingProps
    components: ComponentsProps
  }>({
    query: `
      *[_type == "Blog_Page" && language == $language][0] {
        name,
        "slug": slug.current,
        ${PortableTextQuery('heading')}
        "selectedCategory": *[_type == "BlogCategory_Collection" && slug.current match $category + "$"][0] {
          name,
          "slug": slug.current,
          ${PortableTextQuery('heading')}
        },
        ${Hero_Query}
        ${Listing_Query}
        ${Components_Query}
      }
    `,
    params: {
      language: lang,
      category: category,
      PAGINATION_BEFORE: PAGINATION_BEFORE,
      PAGINATION_AFTER: PAGINATION_AFTER,
    },
  })
  if (!page) return null
  const metadata = await metadataFetch(page?.selectedCategory?.slug || page.slug)
  return { page, metadata }
}

const { page, metadata: _metadata, currentPage, currentCategory } = Astro.props
const lang = Astro.params.lang as Language
const totalPages = Math.ceil(page.listing.totalPostsByCategory / ITEMS_PER_PAGE)

const translation = {
  pl: {
    page: 'Strona',
  },
  en: {
    page: 'Page',
  },
} as const
const useTranslation = translation[lang]

const metadata = {
  ..._metadata,
  title: `${_metadata.title} | ${useTranslation.page} ${currentPage}`,
  description: _metadata.description,
  openGraphImage: _metadata.openGraphImage,
  path: Astro.url.pathname,
}
const getPaginationUrl = (page: number) => {
  if (lang === 'pl')
    return currentCategory
      ? `/${lang}/blog/kategoria/${currentCategory}/strona/${page}`
      : `/${lang}/blog/strona/${page}`
  return currentCategory ? `/${lang}/blog/category/${currentCategory}/page/${page}` : `/${lang}/blog/page/${page}`
}

const breadcrumbs = [
  { name: page.name, path: page.slug },
  ...(page?.selectedCategory ? [{ name: page.selectedCategory.name, path: page.selectedCategory.slug }] : []),
  ...(currentPage > 1 ? [{ name: `${useTranslation.page} ${currentPage}`, path: getPaginationUrl(currentPage) }] : []),
]
---

<Layout {...metadata}>
  <Fragment slot="Head">
    {currentPage > 2 && <link rel="prev" href={getPaginationUrl(currentPage - 1)} />}
    {currentPage < totalPages && <link rel="next" href={getPaginationUrl(currentPage + 1)} />}
  </Fragment>
  <Breadcrumbs data={breadcrumbs} />
  <PortableText value={page?.selectedCategory?.heading || page.heading} heading="h1" class="visually-hidden" />
  <Hero {...page.hero} />
  <Listing {...page.listing} currentPage={currentPage} currentCategory={currentCategory} />
  <Components data={page.components} hasPreviousSections={true} />
</Layout>
