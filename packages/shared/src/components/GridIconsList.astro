---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@repo/ui/Image'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@repo/ui/Button'

export const GridIconsList_Query = `
  _type == "GridIconsList" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ImageDataQuery('img')}
    list[] {
      ${ImageDataQuery('icon')}
      ${PortableTextQuery('title')}
      ${PortableTextQuery('paragraph')}
    },
    ${ButtonDataQuery('ctas[]')}
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  img?: ImageDataProps
  list: Array<{
    icon: ImageDataProps
    title: PortableTextValue
    paragraph: PortableTextValue
  }>
  ctas: Array<ButtonDataProps>
}

const { index, sectionId, heading, paragraph, img, list, ctas } = Astro.props
---

<section class="GridIconsList" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading h2" />
    <PortableText value={paragraph} class="paragraph" />
    {
      img && (
        <div class="image-container">
          <Image {...img} sizes="(min-width: 69rem) 33vw, 100vw" loading={index === 0 ? 'eager' : 'lazy'} />
        </div>
      )
    }
  </header>
  <div class="list">
    <ul>
      {
        list?.map(({ icon, title, paragraph }) => (
          <li>
            <div class="icon">
              <Image {...icon} sizes="20px" />
            </div>
            <PortableText value={title} heading="h3" class="title" />
            <PortableText value={paragraph} class="paragraph" />
          </li>
        ))
      }
    </ul>
    <div class="cta-wrapper">
      {ctas.map((cta) => <Button {...cta} />)}
    </div>
  </div>
</section>

<style lang="scss">
  .GridIconsList {
    padding: clamp(5rem, calc(6vw / 0.48), 8rem) 0;
    display: grid;
    grid-template-columns: 1fr 1.2fr;
    gap: 2rem clamp(5rem, calc(6vw / 0.48), 8rem);
    header {
      .heading {
        margin-bottom: 1rem;
      }
      .paragraph {
        margin-bottom: 1rem;
      }
    }
    .list {
      ul {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: clamp(1.5rem, calc(2vw / 0.48), 2.25rem) clamp(0.75rem, calc(0.75vw / 0.48), 1.25rem);
        li {
          .icon {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            border: 1px solid var(--primary-500, #064040);
            background-color: var(--primary-700, #021d1d);
            margin-bottom: 0.75rem;
            display: grid;
            place-items: center;
            &::before,
            &::after {
              content: '';
              position: absolute;
              border-radius: inherit;
              background: linear-gradient(to bottom, var(--primary-500, #064040), var(--primary-600, #042b2b));
              width: 2.5rem;
              height: 2.5rem;
            }
            &::after {
              background-image: radial-gradient(rgba(255, 255, 255, 0.13) 1px, rgba(255, 255, 255, 0) 1px);
              background-size: 8px 8px;
              mask-image: radial-gradient(62% 80% at 50% 0px, rgb(0, 0, 0) 62%, transparent 100%);
              z-index: 1;
            }
            img {
              z-index: 2;
            }
          }
          .title {
            font-size: var(--typography-body-2xl, 1.25rem);
            margin-bottom: clamp(0.5rem, calc(0.75vw / 0.48), 0.75rem);
          }
          .paragraph {
            font-size: var(--typography-body-xl, 1rem);
            color: var(--neutral-400, #c6cdcc);
          }
        }
      }
      .cta-wrapper {
        margin-top: clamp(2rem, calc(4vw / 0.48), 4rem);
      }
    }
    @media (max-width: 72rem) {
      grid-template-columns: 1fr;
      max-width: 38rem;
      margin: 0 auto;
    }
    @media (max-width: 34rem) {
      .list {
        ul {
          grid-template-columns: 1fr;
          li {
            display: grid;
            grid-template-columns: auto 1fr;
            grid-template-areas:
              'icon title'
              'icon paragraph';
            column-gap: 1rem;
            .icon {
              grid-area: icon;
              align-self: start;
            }
            .title {
              grid-area: title;
            }
            .paragraph {
              grid-area: paragraph;
            }
          }
        }
      }
    }
  }
</style>
