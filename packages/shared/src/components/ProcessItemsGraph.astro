---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@repo/ui/Image'

export const ProcessItemsGraph_Query = `
  _type == "ProcessItemsGraph" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    items[] {
      ${ImageDataQuery('icon')}
      ${PortableTextQuery('text')}
      label,
    },
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  items: Array<{
    icon: ImageDataProps
    text: PortableTextValue
    label?: string
  }>
}

const { index, sectionId, heading, paragraph, items } = Astro.props
---

<section class="ProcessItemsGraph" id={sectionId}>
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="h2 heading" />
    <PortableText value={paragraph} />
  </header>
  <ol class="items">
    {
      items?.map(({ icon, text, label }) => (
        <li class="item">
          <div class="decorator" />
          <div class="icon">
            <Image {...icon} sizes="20px" />
          </div>
          <PortableText value={text} class="text" />
          {label && (
            <p class="label">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
                <circle cx="8.001" cy="8.499" r="6.667" stroke="url(#ProcessItemsGraph-a)" />
                <path
                  stroke="url(#ProcessItemsGraph-b)"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="m5.666 8.832 1.333 1.333 3.334-3.333"
                />
                <defs>
                  <linearGradient
                    id="ProcessItemsGraph-a"
                    x1="14.417"
                    x2=".541"
                    y1="1.832"
                    y2="2.716"
                    gradientUnits="userSpaceOnUse">
                    <stop stop-color="#2DD282" />
                    <stop offset="1" stop-color="#90F4E8" />
                  </linearGradient>
                  <linearGradient
                    id="ProcessItemsGraph-b"
                    x1="10.245"
                    x2="5.407"
                    y1="6.832"
                    y2="7.263"
                    gradientUnits="userSpaceOnUse">
                    <stop stop-color="#2DD282" />
                    <stop offset="1" stop-color="#90F4E8" />
                  </linearGradient>
                </defs>
              </svg>
              {label}
            </p>
          )}
        </li>
      ))
    }
  </ol>
</section>

<style lang="scss">
  .ProcessItemsGraph {
    padding: clamp(3rem, calc(5vw / 0.48), 6rem) 0;
    header {
      max-width: 26rem;
      margin-bottom: clamp(2.5rem, calc(4vw / 0.48), 4rem);
      .heading {
        margin-bottom: 1rem;
      }
    }
    .items {
      display: grid;
      grid-template-columns: 1fr 1fr 1fr 1fr;
      counter-reset: item;
      .item {
        counter-increment: item;
        .decorator {
          position: relative;
          width: 100%;
          aspect-ratio: 1/1;
          margin-left: 21px;
          margin-right: -21px;
          overflow: hidden;
          border-radius: 50%;
          margin-bottom: -50%;
          clip-path: polygon(0 0, 100% 0, 100% 50%, 0 50%);
          &::before {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            aspect-ratio: 1/1;
            border-radius: 50%;
            border: 1.5px dashed var(--primary-500, #064040);
          }
          &::after {
            content: '';
            position: absolute;
            left: 0;
            right: 0;
            top: -62%;
            bottom: 62%;
            border-radius: 50%;
            background: linear-gradient(266deg, #0b0f0d, #011310, #001f1b);
            filter: blur(32px);
            transform: translateY(0);
            z-index: -1;
          }
        }
        &:nth-child(4n),
        &:last-child {
          .decorator {
            &::before,
            &::after {
              display: none;
            }
          }
        }
        .icon {
          width: 44px;
          height: 44px;
          border-radius: 50%;
          border: 1px solid var(--primary-500, #064040);
          background: var(--neutral-900, #000103);
          display: grid;
          place-items: center;
          img {
            width: 20px;
            height: 20px;
          }
        }
        .text {
          margin-top: clamp(1.5rem, calc(1.75vw / 0.48), 4rem);
          font-size: var(--typography-body-xl, 1rem);
          padding-right: 2rem;
          & > :global(p) {
            display: inline;
          }
          &::before {
            content: counter(item) '. ';
          }
        }
        &:nth-child(-n + 9) {
          .text::before {
            content: '0' counter(item) '. ';
          }
        }
        .label {
          margin-top: 1.25rem;
          display: inline-grid;
          grid-template-columns: auto 1fr;
          align-items: center;
          gap: 0.5rem;
          border-radius: 2rem;
          border: 1px solid var(--primary-500, #064040);
          background: var(--primary-700, #021d1d);
          padding: 0.25rem 0.75rem 0.25rem 0.5rem;
          font-size: var(--typography-body-m, 0.875rem);
        }
      }
    }
    @media (max-width: 63rem) {
      max-width: 28rem;
      margin: 0 auto;
      .items {
        grid-template-columns: 1fr;
        .item {
          position: relative;
          padding-left: clamp(42px, calc(5px / 7.68), 50px);
          &:not(:last-child) {
            padding-bottom: clamp(3rem, calc(4vw / 0.48), 4rem);
          }
          .decorator {
            position: absolute;
            left: 0;
            top: 22px;
            width: 50px;
            height: 100%;
            aspect-ratio: unset;
            margin-left: unset;
            margin-right: unset;
            margin-bottom: unset;
            border-radius: unset;
            clip-path: unset;
            &::before {
              right: 50%;
              bottom: 0;
              aspect-ratio: unset;
              border-radius: unset;
              border-top-left-radius: 4px;
              border-bottom-left-radius: 4px;
              border-right: unset;
            }
            &::after {
              height: 100%;
              left: unset;
              right: -15%;
              top: 0;
              bottom: 0;
              aspect-ratio: 1/1;
            }
          }
          &:nth-child(4n) {
            .decorator {
              &::before,
              &::after {
                display: unset;
              }
            }
          }
          &:last-child {
            .decorator {
              &::before,
              &::after {
                display: none;
              }
            }
          }
        }
      }
    }
  }
</style>
