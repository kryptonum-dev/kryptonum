---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Image, { ImageDataQuery, type ImageDataProps } from '@repo/ui/Image'
import Copy from '@repo/ui/Copy.astro'
import FormWrapper from './Form/FormWrapper.astro'
import { type Language } from '@repo/shared/languages'

export type Props = {
  index: number
  sectionId?: string
  variant: 'form-with-list' | 'form-with-person'
  img: ImageDataProps
  emailText: string
  email: string
  telText: string
  tel?: string
  heading: PortableTextValue
  paragraph: PortableTextValue
  list: Array<{
    icon: ImageDataProps
    label: PortableTextValue
  }>
  state: {
    success: {
      heading: PortableTextValue
      paragraph: PortableTextValue
      link: {
        url: string
        icon: ImageDataProps
        heading: string
        paragraph: string
        img: ImageDataProps
      }
    }
    error: {
      heading: PortableTextValue
      paragraph: PortableTextValue
    }
  }
}

export const ContactForm_Query = `
  _type == "ContactForm" => {
    variant,
    "img": select(isReference => personReference -> ${ImageDataQuery('img')} ${ImageDataQuery('img')}),
    emailText,
    "email": select(variant == "form-with-person" => select(isReference => personReference -> email, email), *[_type == "global"][0].email),
    telText,
    "tel": coalesce(tel, personReference -> tel),
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    list[] {
      ${ImageDataQuery('icon')}
      ${PortableTextQuery('label')}
    },
    state {
      success {
        ${PortableTextQuery('heading')}
        ${PortableTextQuery('paragraph')}
        link {
          url,
          ${ImageDataQuery('icon')}
          heading,
          paragraph,
          ${ImageDataQuery('img')}
        },
      },
      error {
        ${PortableTextQuery('heading')}
        ${PortableTextQuery('paragraph')}
      },
    },
  },
`

const lang = Astro.params.lang as Language
const translations = {
  pl: {
    copyTelSuccess: 'Pomyślnie skopiowano numer telefonu',
    copyEmailSuccess: 'Pomyślnie skopiowano adres e-mail',
  },
  en: {
    copyTelSuccess: 'Successfully copied phone number',
    copyEmailSuccess: 'Successfully copied email address',
  },
} as const
const t = translations[lang]

const { index, sectionId, variant, img, emailText, email, telText, tel, heading, paragraph, list, state } = Astro.props
---

<section class="ContactForm" id={sectionId} data-variant={variant}>
  {
    variant === 'form-with-list' && (
      <div class="wrapper">
        <header>
          <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
          <PortableText value={paragraph} />
        </header>
        <ul class="list">
          {list.map(({ icon, label }) => (
            <li class="item">
              <Image {...icon} sizes="20px" loading={index === 0 ? 'eager' : 'lazy'} />
              <PortableText value={label} />
            </li>
          ))}
        </ul>
        <FormWrapper state={state} variant={variant} email={email} />
      </div>
    )
  }
  {
    variant === 'form-with-person' && (
      <div class="wrapper">
        <header>
          <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading" />
        </header>
        <div class="avatar-wrapper">
          <Image {...img} sizes="64px" class="gradient-thumbnail" />
          <div class="person">
            <div class="email">
              <p class="label-text">{emailText}</p>
              <a href={`mailto:${email}`}>{email}</a>
              <Copy data={email} successMessage={t.copyEmailSuccess} />
            </div>
            {tel && (
              <div class="tel">
                <p class="label-text">{telText}</p>
                <a href={`tel:${tel}`}>{tel}</a>
                <Copy data={tel} successMessage={t.copyTelSuccess} />
              </div>
            )}
          </div>
        </div>
        <FormWrapper state={state} variant={variant} email={email} />
      </div>
    )
  }
</section>

<style lang="scss">
  .ContactForm {
    padding: clamp(2rem, calc(3vw / 0.48), 4rem) 0;
    .wrapper {
      padding: clamp(2rem, calc(3vw / 0.48), 3rem) clamp(2rem, calc(3vw / 0.48), 6rem);
      border-top: 1px solid var(--primary-500, #064040);
      border-bottom: 1px solid var(--primary-500, #064040);
      display: grid;
      grid-template-columns: 1.25fr 1fr;
      grid-template-rows: auto 1fr;
      column-gap: clamp(2rem, calc(3vw / 0.48), 8rem);
    }
    &[data-variant='form-with-list'] {
      .wrapper {
        grid-template-areas: 'header form' 'list form';
        header {
          grid-area: header;
          .heading {
            margin-bottom: 1rem;
          }
        }
        .list {
          grid-area: list;
          margin-top: 2.5rem;
          .item {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 0.5rem;
            img {
              width: 20px;
              height: 20px;
              margin-top: 0.25rem;
            }
            &:not(:last-child) {
              margin-bottom: 1rem;
            }
          }
        }
        :global(.Form) {
          grid-area: form;
        }
      }
      @media (max-width: 65rem) {
        max-width: 38rem;
        margin: 0 auto;
        .wrapper {
          grid-template-columns: 1fr;
          grid-template-areas: 'header' 'form' 'list';
          gap: clamp(2rem, calc(4vw / 0.48), 4rem);
          padding-left: 0;
          padding-right: 0;
          .list {
            margin-top: 0;
            padding-top: 2rem;
            border-top: 1px solid var(--primary-500, #064040);
          }
        }
      }
    }
    &[data-variant='form-with-person'] {
      .wrapper {
        grid-template-areas: 'header form' 'avatar form';
        header {
          grid-area: header;
          .heading {
            font-size: var(--typography-body-xl, 1rem);
          }
        }
        .avatar-wrapper {
          grid-area: avatar;
          margin-top: 2.5rem;
          display: grid;
          align-items: flex-start;
          grid-template-columns: auto 1fr;
          gap: 1rem;
          .person {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 1rem clamp(1rem, calc(1.5vw / 0.48), 1.75rem);
            a {
              margin-right: 0.38rem;
            }
          }
          img {
            width: clamp(56px, calc(64px / 7.68), 64px);
            height: clamp(56px, calc(64px / 7.68), 64px);
          }
          .label-text {
            font-size: var(--typography-body-m, 0.875rem);
            color: var(--neutral-400, #c6cdcc);
          }
        }
        :global(.Form) {
          grid-area: form;
        }
      }
      @media (max-width: 65rem) {
        max-width: 38rem;
        margin: 0 auto;
        .wrapper {
          grid-template-columns: 1fr;
          grid-template-areas: 'header' 'form' 'avatar';
          gap: clamp(2rem, calc(4vw / 0.48), 4rem);
          padding-left: 0;
          padding-right: 0;
          .avatar-wrapper {
            margin-top: 0;
            padding-top: 2rem;
            border-top: 1px solid var(--primary-500, #064040);
          }
        }
      }
    }
  }
</style>
