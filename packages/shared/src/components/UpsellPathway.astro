---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@repo/ui/portable-text'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@repo/ui/Button'
import CategoryTab from '@repo/ui/CategoryTab.astro'
import Image, { ImageDataQuery, type ImageDataProps } from '@repo/ui/Image'

export const UpsellPathway_Query = `
  _type == "UpsellPathway" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('groupsHeading')}
    groups[] {
      groupName,
      advantages {
        ${PortableTextQuery('text')}
        items[]
      },
      disadvantages {
        ${PortableTextQuery('text')}
        items[]
      },
      pathway {
        heading,
        items[] {
          reference -> {
            ${ImageDataQuery('thumbnail')}
            name,
            "price": string(price) + " " + currency,
            "slug": slug.current
          },
          ${PortableTextQuery('heading')}
          ${PortableTextQuery('text')}
        },
        ctaHeading,
        price,
        oldPrice,
        saleTag,
        ${ButtonDataQuery('cta')}
      }
    }
  },
`

type Props = {
  index: number
  sectionId?: string
  heading: PortableTextValue
  groupsHeading: PortableTextValue
  groups: Array<{
    groupName: string
    advantages: {
      text: PortableTextValue
      items: string[]
    }
    disadvantages: {
      text: PortableTextValue
      items: string[]
    }
    pathway: {
      heading: PortableTextValue
      items: Array<{
        reference: {
          name: string
          thumbnail: ImageDataProps
          price: string
          slug: string
        }
        heading: PortableTextValue
        text: PortableTextValue
      }>
      ctaHeading: string
      price: string
      oldPrice?: string
      saleTag: string
      cta: ButtonDataProps
    }
  }>
}

const { index, sectionId, heading, groupsHeading, groups } = Astro.props
---

<section class="UpsellPathway" id={sectionId}>
  <header class="header">
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} class="heading h2" />
  </header>
  <div class="groups sec-wo-margin">
    <div class="max-width">
      <div class="text-container">
        <PortableText value={groupsHeading} heading={index === 0 ? 'h2' : 'h3'} class="groups-heading h3" />
        <div class="groups-pills">
          {
            groups.map(({ groupName }, groupsIndex) => (
              <CategoryTab isActive={groupsIndex === 0} data-group-index={groupsIndex}>
                {groupName}
              </CategoryTab>
            ))
          }
        </div>
        {
          groups.map(({ advantages, disadvantages }, groupsIndex) => (
            <div class="text-container_content" data-active={groupsIndex === 0} data-group-index={groupsIndex}>
              <PortableText value={advantages.text} class="text" />
              <ul>
                {advantages.items.map((item) => (
                  <li>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
                      <path
                        fill="url(#paint0_linear_7676_79913)"
                        fill-rule="evenodd"
                        d="M18.33 10.001a8.333 8.333 0 1 1-16.666 0 8.333 8.333 0 0 1 16.667 0Zm-4.974-2.525a.625.625 0 0 1 0 .884l-4.167 4.167a.625.625 0 0 1-.884 0L6.64 10.86a.625.625 0 1 1 .884-.884l1.224 1.225 1.863-1.863 1.862-1.862a.625.625 0 0 1 .884 0Z"
                        clip-rule="evenodd"
                      />
                      <defs>
                        <linearGradient
                          id="paint0_linear_7676_79913"
                          x1="18.018"
                          x2=".673"
                          y1="1.668"
                          y2="2.773"
                          gradientUnits="userSpaceOnUse">
                          <stop stop-color="#2DD282" />
                          <stop offset="1" stop-color="#90F4E8" />
                        </linearGradient>
                      </defs>
                    </svg>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
              <PortableText value={disadvantages.text} class="text disadvantages-text" />
              <ul>
                {disadvantages.items.map((item) => (
                  <li>
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
                      <path
                        fill="url(#paint0_linear_7676_79928)"
                        fill-rule="evenodd"
                        d="M18.33 10.001a8.333 8.333 0 1 1-16.666 0 8.333 8.333 0 0 1 16.667 0ZM7.473 7.476a.625.625 0 0 1 .884 0l1.641 1.641 1.642-1.641a.625.625 0 1 1 .884.884L10.88 10l1.642 1.642a.625.625 0 1 1-.884.883l-1.642-1.64-1.641 1.64a.625.625 0 0 1-.884-.883L9.113 10 7.473 8.36a.625.625 0 0 1 0-.884Z"
                        clip-rule="evenodd"
                      />
                      <defs>
                        <linearGradient
                          id="paint0_linear_7676_79928"
                          x1="18.018"
                          x2=".673"
                          y1="1.668"
                          y2="2.773"
                          gradientUnits="userSpaceOnUse">
                          <stop stop-color="#D44A84" />
                          <stop offset=".521" stop-color="#DA2B53" />
                          <stop offset="1" stop-color="#BF3A3A" />
                        </linearGradient>
                      </defs>
                    </svg>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </div>
          ))
        }
      </div>
      <div class="pathway-container">
        {
          groups.map(({ pathway }, groupsIndex) => (
            <div class="pathway-container_content" data-active={groupsIndex === 0} data-group-index={groupsIndex}>
              <p class="heading">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="none" viewBox="0 0 18 18">
                  <circle cx="3.75" cy="3.75" r="2.25" stroke="url(#paint0_linear_7697_54653)" />
                  <circle cx="14.25" cy="14.25" r="2.25" stroke="url(#paint1_linear_7697_54653)" />
                  <path
                    stroke="url(#paint2_linear_7697_54653)"
                    d="M8.25 3.75h3.849c1.5 0 2.071 1.96.805 2.765l-7.808 4.97C3.83 12.29 4.4 14.25 5.9 14.25H9.75m0 0-1.125-1.125M9.75 14.25l-1.125 1.125"
                  />
                  <defs>
                    <linearGradient
                      id="paint0_linear_7697_54653"
                      x1="5.916"
                      x2="1.232"
                      y1="1.5"
                      y2="1.798"
                      gradientUnits="userSpaceOnUse">
                      <stop stop-color="#2DD282" />
                      <stop offset="1" stop-color="#90F4E8" />
                    </linearGradient>
                    <linearGradient
                      id="paint1_linear_7697_54653"
                      x1="16.416"
                      x2="11.732"
                      y1="12"
                      y2="12.298"
                      gradientUnits="userSpaceOnUse">
                      <stop stop-color="#2DD282" />
                      <stop offset="1" stop-color="#90F4E8" />
                    </linearGradient>
                    <linearGradient
                      id="paint2_linear_7697_54653"
                      x1="13.429"
                      x2="3.837"
                      y1="3.75"
                      y2="4.234"
                      gradientUnits="userSpaceOnUse">
                      <stop stop-color="#2DD282" />
                      <stop offset="1" stop-color="#90F4E8" />
                    </linearGradient>
                  </defs>
                </svg>
                {pathway.heading}
              </p>
              {pathway.items.map(({ reference, heading, text }, itemIndex) => (
                <div class="pathway-item">
                  <Image {...reference.thumbnail} class="thumbnail" sizes="64px" />
                  <p class="name">{reference.name}</p>
                  <div>
                    <p>{reference.price}</p>
                    {heading && text && (
                      <button
                        type="button"
                        class="info-button"
                        data-item-index={itemIndex}
                        data-group-index={groupsIndex}
                        aria-label={`Show details for ${reference.name}`}>
                        INFO
                      </button>
                    )}
                  </div>
                </div>
              ))}
              <div class="cta-section">
                <div>
                  <p class="ctaHeading">{pathway.ctaHeading}</p>
                  <div class="saleTag">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none" viewBox="0 0 16 17">
                      <path
                        fill="url(#paint0_linear_7676_79981)"
                        fill-rule="evenodd"
                        d="M1.418 9.043c.191.668.707 1.183 1.737 2.214l1.22 1.22c1.792 1.792 2.689 2.688 3.802 2.688 1.114 0 2.01-.896 3.803-2.689 1.793-1.792 2.69-2.689 2.69-3.802 0-1.114-.897-2.01-2.69-3.803l-1.22-1.22c-1.03-1.03-1.545-1.546-2.213-1.737-.669-.192-1.379-.028-2.799.3l-.818.189c-1.195.275-1.792.413-2.201.822-.41.409-.547 1.006-.823 2.2l-.189.82c-.327 1.42-.491 2.13-.3 2.798Zm5.334-3.697A1.344 1.344 0 1 1 4.85 7.247a1.344 1.344 0 0 1 1.902-1.901Zm5.951 3.187-4.652 4.653a.5.5 0 0 1-.707-.707l4.652-4.653a.5.5 0 1 1 .707.707Z"
                        clip-rule="evenodd"
                      />
                      <defs>
                        <linearGradient
                          id="paint0_linear_7676_79981"
                          x1="14.419"
                          x2=".543"
                          y1="1.832"
                          y2="2.716"
                          gradientUnits="userSpaceOnUse">
                          <stop stop-color="#2DD282" />
                          <stop offset="1" stop-color="#90F4E8" />
                        </linearGradient>
                      </defs>
                    </svg>
                    {pathway.saleTag}
                  </div>
                </div>
                <div class="price-container">
                  <p class="price">{pathway.price}</p>
                  {pathway.oldPrice && <del class="oldPrice">{pathway.oldPrice}</del>}
                </div>
                <Button {...pathway.cta} className="cta" />
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</section>

<!-- Sidebar -->
<aside
  class="pathway-sidebar"
  id="pathway-sidebar"
  aria-hidden="true"
  aria-labelledby="sidebar-heading"
  role="complementary">
  <div class="sidebar-overlay" aria-hidden="true"></div>
  <div class="sidebar-content">
    <div class="sidebar-header">
      <h3 id="sidebar-heading" class="sidebar-title"></h3>
      <button type="button" class="sidebar-close" aria-label="Close sidebar">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M18 6 6 18M6 6l12 12">
          </path>
        </svg>
      </button>
    </div>
    <div class="sidebar-body">
      <div class="accordion-container" role="region" aria-label="Pathway items">
        <!-- Accordion items will be populated by JavaScript -->
      </div>
    </div>
  </div>
</aside>

<style lang="scss">
  .UpsellPathway {
    padding: clamp(3rem, calc(4vw / 0.48), 5rem) 0;
    .header {
      max-width: 24.75rem;
      margin: 0 auto clamp(1.5rem, calc(3vw / 0.48), 3rem);
      text-align: center;
    }
    .groups {
      padding: clamp(2rem, calc(4vw / 0.48), 4rem) 0;
      position: relative;
      &::before {
        content: '';
        height: 1px;
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        background: var(--primary-gradient-400, #2dd282);
      }
      .max-width {
        max-width: 72rem;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem 4rem;
      }
      .text-container {
        .groups-heading {
          margin-bottom: 0.5rem;
        }
        .groups-pills {
          display: flex;
          flex-wrap: wrap;
          gap: 0.38rem;
          margin-bottom: clamp(1rem, calc(1.75vw / 0.48), 1.75rem);
          padding-bottom: 0.75rem;
          border-bottom: 1px solid var(--neutral-600, #4a4a57);
        }
        &_content {
          transition: filter 500ms var(--easing);
          will-change: filter;
          &:not([data-active='true']) {
            filter: blur(8px);
            visibility: hidden;
            position: absolute;
          }
          .text {
            margin-bottom: clamp(1rem, calc(1.5vw / 0.48), 1.5rem);
            color: var(--text-body-dark, #c6cdcc);
          }
          .disadvantages-text {
            margin-top: clamp(2.5rem, calc(3vw / 0.48), 4.5rem);
          }
          ul {
            display: grid;
            gap: 0.75rem;
            li {
              display: grid;
              grid-template-columns: auto 1fr;
              gap: 0.5rem;
              svg {
                margin-top: 0.25rem;
              }
            }
          }
        }
      }
      .pathway-container {
        &_content {
          padding: clamp(1rem, calc(2.5vw / 0.48), 2.5rem);
          border-radius: 1.25rem;
          border: 1px solid var(--primary-500, #064040);
          transition: filter 500ms var(--easing);
          will-change: filter;
          position: relative;
          &:not([data-active='true']) {
            filter: blur(8px);
            visibility: hidden;
            position: absolute;
          }
          .heading {
            position: absolute;
            left: clamp(1rem, calc(2.5vw / 0.48), 2.5rem);
            right: clamp(1rem, calc(2.5vw / 0.48), 2.5rem);
            margin: auto;
            width: fit-content;
            top: 0;
            transform: translateY(-50%);
            border-radius: 4rem;
            background: rgba(0, 1, 3, 1);
            padding: 0.38rem 0.56rem;
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 0.5rem;
            align-items: center;
          }
          .pathway-item {
            display: grid;
            grid-template-columns: 64px 1fr auto;
            align-items: center;
            gap: 1rem;
            font-size: var(--typography-body-m, 0.875rem);
            border-radius: 0.25rem;
            border: 2px solid var(--primary-500, #064040);
            overflow: hidden;
            box-shadow: 0px 0px 0px 4px var(--primary-700, #021d1d);
            padding-right: clamp(0.5rem, calc(1vw / 0.48), 1.5rem);
            .name {
              padding: 1rem 0;
            }
          }
          .cta-section {
            display: grid;
            grid-template-columns: 1fr auto;
            gap: 1.75rem 1rem;
            .ctaHeading {
              font-size: var(--typography-body-2xl, 1.25rem);
              margin-bottom: 0.38rem;
            }
            .saleTag {
              border-radius: 3rem;
              border: 1px solid var(--primary-500, #064040);
              background: var(--primary-900, #001414);
              padding: 0.25rem 0.62rem 0.25rem 0.5rem;
              display: inline-grid;
              grid-template-columns: auto 1fr;
              gap: 0.5rem;
              align-items: center;
              font-size: var(--typography-body-s, 0.75rem);
            }
            .price-container {
              text-align: right;
              .price {
                font-size: var(--typography-body-2xl, 1.25rem);
              }
              .oldPrice {
                color: var(--neutral-500, #75758a);
              }
            }
            .cta {
              grid-column: 1 / -1;
            }
          }
        }
      }
    }
  }

  // Sidebar styles
  .pathway-sidebar {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    max-width: 28rem;
    z-index: 1000;
    transform: translateX(100%);
    transition: transform 500ms var(--easing);

    &[aria-hidden='false'] {
      transform: translateX(0);

      .sidebar-overlay {
        opacity: 1;
        pointer-events: auto;
      }
    }

    .sidebar-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      opacity: 0;
      pointer-events: none;
      transition: opacity 500ms var(--easing);
      z-index: -1;
    }

    .sidebar-content {
      height: 100%;
      background: var(--neutral-900, #0a0a0a);
      border-left: 1px solid var(--neutral-600, #4a4a57);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .sidebar-header {
      padding: 1.5rem;
      border-bottom: 1px solid var(--neutral-600, #4a4a57);
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;

      .sidebar-title {
        margin: 0;
        font-size: var(--typography-body-xl, 1.125rem);
        color: var(--neutral-200, #f0f7f7);
      }

      .sidebar-close {
        padding: 0.5rem;
        border: none;
        background: none;
        color: var(--neutral-400, #c6cdcc);
        cursor: pointer;
        border-radius: 0.5rem;
        transition:
          color 300ms var(--easing),
          background-color 300ms var(--easing);

        &:hover {
          color: var(--neutral-200, #f0f7f7);
          background: var(--neutral-800, #1a1a1a);
        }

        &:focus-visible {
          outline: 2px solid var(--primary-400, #2dd282);
          outline-offset: 2px;
        }
      }
    }

    .sidebar-body {
      flex: 1;
      overflow-y: auto;
      padding: 1.5rem;
    }

    .accordion-container {
      display: grid;
      gap: 0.75rem;
    }

    .accordion-item {
      border: 1px solid var(--neutral-600, #4a4a57);
      border-radius: 0.75rem;
      overflow: hidden;

      &[data-expanded='true'] {
        .accordion-trigger {
          background: var(--neutral-800, #1a1a1a);

          svg {
            transform: rotate(180deg);
          }
        }

        .accordion-content {
          max-height: 500px;
          padding: 1rem 1.5rem 1.5rem;
        }
      }
    }

    .accordion-trigger {
      width: 100%;
      padding: 1rem 1.5rem;
      border: none;
      background: none;
      color: var(--neutral-200, #f0f7f7);
      text-align: left;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 1rem;
      font-size: var(--typography-body-m, 0.875rem);
      font-weight: 500;
      transition: background-color 300ms var(--easing);

      &:hover {
        background: var(--neutral-800, #1a1a1a);
      }

      &:focus-visible {
        outline: 2px solid var(--primary-400, #2dd282);
        outline-offset: -2px;
      }

      svg {
        flex-shrink: 0;
        transition: transform 300ms var(--easing);
        color: var(--neutral-400, #c6cdcc);
      }
    }

    .accordion-content {
      max-height: 0;
      overflow: hidden;
      transition:
        max-height 400ms var(--easing),
        padding 400ms var(--easing);

      .accordion-text {
        color: var(--neutral-400, #c6cdcc);
        margin-bottom: 1.5rem;
        line-height: 1.6;
      }

      .accordion-cta {
        width: 100%;
      }
    }

    @media (max-width: 48rem) {
      max-width: 100%;

      .sidebar-content {
        margin-left: 2rem;
      }
    }
  }

  .info-button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--primary-500, #064040);
    background: var(--primary-900, #001414);
    color: var(--neutral-200, #f0f7f7);
    border-radius: 0.5rem;
    font-size: var(--typography-body-s, 0.75rem);
    font-weight: 500;
    cursor: pointer;
    transition:
      background-color 300ms var(--easing),
      border-color 300ms var(--easing),
      transform 200ms var(--easing);

    &:hover {
      background: var(--primary-800, #002020);
      border-color: var(--primary-400, #2dd282);
    }

    &:focus-visible {
      outline: 2px solid var(--primary-400, #2dd282);
      outline-offset: 2px;
    }

    &:active {
      transform: scale(0.98);
    }
  }
</style>

<script>
  document.querySelectorAll('.UpsellPathway').forEach((section) => {
    const groupTabs = section.querySelectorAll('[data-category-tab][data-group-index]')
    const groupContents = section.querySelectorAll('.text-container_content[data-group-index]')
    const pathwayContents = section.querySelectorAll('.pathway-container_content[data-group-index]')
    const infoButtons = section.querySelectorAll('.info-button')
    const sidebar = document.getElementById('pathway-sidebar')
    const sidebarTitle = sidebar?.querySelector('.sidebar-title')
    const sidebarClose = sidebar?.querySelector('.sidebar-close')
    const sidebarOverlay = sidebar?.querySelector('.sidebar-overlay')
    const accordionContainer = sidebar?.querySelector('.accordion-container')

    // Store pathway data for sidebar
    let pathwayData: Array<{
      heading: string
      items: Array<{
        name: string
        price: string
        hasInfo: boolean
        groupIndex: number
        itemIndex: number
        heading?: string
        text?: string
        cta?: {
          text: string
          href: string
        }
      }>
      groupIndex: number
    }> = []

    // Extract pathway data from the component
    const extractPathwayData = () => {
      const groups = Array.from(section.querySelectorAll('.pathway-container_content'))
      pathwayData = groups.map((group, groupIndex) => {
        const heading = group.querySelector('.heading')?.textContent || ''
        const items = Array.from(group.querySelectorAll('.pathway-item')).map((item, itemIndex) => {
          const name = item.querySelectorAll('p')[0]?.textContent || ''
          const price = item.querySelectorAll('p')[1]?.textContent || ''
          const infoButton = item.querySelector('.info-button')

          // Extract additional data from the original pathway structure
          const pathwayContainer = section.querySelector(`.pathway-container_content[data-group-index="${groupIndex}"]`)
          const ctaButton = pathwayContainer?.querySelector('.cta')

          return {
            name,
            price,
            hasInfo: !!infoButton,
            groupIndex,
            itemIndex,
            heading: `Details for ${name}`, // We'll use a generic heading since the actual heading/text is in the Astro data
            text: `Learn more about ${name} and how it fits into your learning pathway.`,
            cta: ctaButton
              ? {
                  text: ctaButton.textContent || 'Learn More',
                  href: ctaButton.getAttribute('href') || '#',
                }
              : undefined,
          }
        })
        return { heading, items, groupIndex }
      })
    }

    // Initialize pathway data
    extractPathwayData()

    // Group tab functionality
    groupTabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        const selectedIndex = tab.getAttribute('data-group-index')
        groupTabs.forEach((t) => {
          const isSelected = t.getAttribute('data-group-index') === selectedIndex
          t.setAttribute('aria-selected', isSelected.toString())
        })
        groupContents.forEach((content) => {
          const isActive = content.getAttribute('data-group-index') === selectedIndex
          content.setAttribute('data-active', isActive.toString())
        })
        pathwayContents.forEach((content) => {
          const isActive = content.getAttribute('data-group-index') === selectedIndex
          content.setAttribute('data-active', isActive.toString())
        })
      })
    })

    // Info button functionality
    infoButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const groupIndexAttr = button.getAttribute('data-group-index')
        const itemIndexAttr = button.getAttribute('data-item-index')
        if (groupIndexAttr && itemIndexAttr) {
          const groupIndex = parseInt(groupIndexAttr)
          const itemIndex = parseInt(itemIndexAttr)
          openSidebar(groupIndex, itemIndex)
        }
      })
    })

    // Open sidebar function
    const openSidebar = (groupIndex: number, targetItemIndex: number) => {
      if (!sidebar || !sidebarTitle || !accordionContainer) return

      const groupData = pathwayData[groupIndex]
      if (!groupData) return

      // Set sidebar title
      sidebarTitle.textContent = groupData.heading

      // Create accordion items
      accordionContainer.innerHTML = ''
      groupData.items.forEach((item, itemIndex: number) => {
        if (!item.hasInfo) return

        const accordionItem = document.createElement('div')
        accordionItem.className = 'accordion-item'
        accordionItem.setAttribute('data-expanded', (itemIndex === targetItemIndex).toString())

        const triggerId = `accordion-trigger-${groupIndex}-${itemIndex}`
        const contentId = `accordion-content-${groupIndex}-${itemIndex}`

        accordionItem.innerHTML = `
          <button
            type="button"
            class="accordion-trigger"
            id="${triggerId}"
            aria-expanded="${itemIndex === targetItemIndex}"
            aria-controls="${contentId}"
          >
            <span>${item.name}</span>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" viewBox="0 0 16 16">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6l4 4 4-4"/>
            </svg>
          </button>
          <div
            class="accordion-content"
            id="${contentId}"
            role="region"
            aria-labelledby="${triggerId}"
          >
            <div class="accordion-text">
              <!-- Content will be populated from the actual pathway data -->
              <p>${item.text}</p>
            </div>
            <button type="button" class="accordion-cta">
              ${item.cta?.text || 'View Details'}
            </button>
          </div>
        `

        accordionContainer.appendChild(accordionItem)

        // Add accordion functionality
        const trigger = accordionItem.querySelector('.accordion-trigger') as HTMLButtonElement
        if (trigger) {
          trigger.addEventListener('click', () => {
            const isExpanded = accordionItem.getAttribute('data-expanded') === 'true'
            accordionItem.setAttribute('data-expanded', (!isExpanded).toString())
            trigger.setAttribute('aria-expanded', (!isExpanded).toString())
          })
        }
      })

      // Show sidebar
      sidebar.setAttribute('aria-hidden', 'false')
      document.body.style.overflow = 'hidden'

      // Focus management
      setTimeout(() => {
        const targetAccordion = accordionContainer.querySelector(
          `[data-expanded="true"] .accordion-trigger`
        ) as HTMLButtonElement
        if (targetAccordion) {
          targetAccordion.focus()
        } else if (sidebarClose) {
          ;(sidebarClose as HTMLButtonElement).focus()
        }
      }, 100)
    }

    // Close sidebar function
    const closeSidebar = () => {
      if (!sidebar) return

      sidebar.setAttribute('aria-hidden', 'true')
      document.body.style.overflow = ''

      // Return focus to the button that opened the sidebar
      const lastClickedButton = document.activeElement as HTMLButtonElement
      setTimeout(() => {
        if (lastClickedButton && lastClickedButton.classList.contains('info-button')) {
          lastClickedButton.focus()
        }
      }, 100)
    }

    // Sidebar close events
    sidebarClose?.addEventListener('click', closeSidebar)
    sidebarOverlay?.addEventListener('click', closeSidebar)

    // Keyboard navigation
    document.addEventListener('keydown', (e: KeyboardEvent) => {
      if (sidebar?.getAttribute('aria-hidden') === 'false') {
        if (e.key === 'Escape') {
          e.preventDefault()
          closeSidebar()
        }
      }
    })

    // Trap focus in sidebar when open
    const trapFocus = (e: KeyboardEvent) => {
      if (sidebar?.getAttribute('aria-hidden') === 'false') {
        const focusableElements = sidebar.querySelectorAll(
          'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        )
        const firstElement = focusableElements[0] as HTMLElement
        const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement

        if (e.key === 'Tab') {
          if (e.shiftKey) {
            if (document.activeElement === firstElement) {
              e.preventDefault()
              lastElement.focus()
            }
          } else {
            if (document.activeElement === lastElement) {
              e.preventDefault()
              firstElement.focus()
            }
          }
        }
      }
    }

    document.addEventListener('keydown', trapFocus)
  })
</script>
