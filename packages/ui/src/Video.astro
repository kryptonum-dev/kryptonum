---
import type { HTMLAttributes } from 'astro/types'

type Props = {
  playbackId: string
  aspectRatio: string
  hideControls?: boolean
} & HTMLAttributes<'div'>

const { playbackId, aspectRatio, hideControls, ...props } = Astro.props

const aspect_ratio = aspectRatio.replace(':', ' / ')

export type VideoDataProps = Props

export const VideoDataQuery = (name: string) => `
  ${name} {
    "playbackId": asset -> playbackId,
    "aspectRatio": asset -> data.aspect_ratio,
  }
`
---

<mux-player
  disable-cookies
  disable-tracking
  playback-id={playbackId}
  primary-color="#fff"
  accent-color="#2DD282"
  style={`aspect-ratio: ${aspect_ratio}; ${hideControls ? '--controls: none;' : ''}`}
  {...hideControls ? { muted: true, autoplay: true, loop: true } : {}}
  {...props}>
</mux-player>

<style lang="scss">
  mux-player {
    display: block;
    overflow: hidden;
    --seek-backward-button: none;
    --seek-forward-button: none;
    --captions-button: none;
    --playback-rate-button: none;
    --pip-button: none;
  }
</style>

<script>
  const observer = new IntersectionObserver(
    async (videos) => {
      for (const video of videos) {
        if (video.isIntersecting) {
          await import('@mux/mux-player')
        }
      }
    },
    { rootMargin: '100px' }
  )

  document.querySelectorAll('mux-player').forEach((video) => {
    observer.observe(video)
  })
</script>
