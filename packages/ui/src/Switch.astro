---
import type { HTMLAttributes } from 'astro/types'

type Props = {
  asLabel?: boolean
  inputProps?: HTMLAttributes<'input'>
} & HTMLAttributes<'label'>

const { inputProps, asLabel, ...props } = Astro.props

const Element = asLabel ? 'label' : 'div'
---

<Element data-switch {...props}>
  <input type="checkbox" {...inputProps} />
  <div class="toggle-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 20 20">
      <path
        stroke="url(#paint0_linear_10068_23850)"
        stroke-linecap="round"
        stroke-linejoin="round"
        d="m14 7-5.966 6L6 10.955">
      </path>
      <defs>
        <linearGradient
          id="paint0_linear_10068_23850"
          x1="13.85"
          x2="5.55"
          y1="7"
          y2="7.705"
          gradientUnits="userSpaceOnUse">
          <stop stop-color="#2DD282"></stop><stop offset="1" stop-color="#90F4E8"></stop>
        </linearGradient>
      </defs>
    </svg>
  </div>
</Element>

<style lang="scss">
  [data-switch] {
    cursor: pointer;
    width: 3.375rem;
    height: 2rem;
    margin: 0.375rem 0;
    border-radius: 2.75rem;
    border: 1px solid var(--neutral-400, #c6cdcc);
    position: relative;
    &::before {
      content: '';
      position: absolute;
      left: -1px;
      top: -1px;
      right: -1px;
      bottom: -1px;
      background: var(--primary-gradient-400, linear-gradient(266deg, #2dd282, #90f4e8));
      border-radius: inherit;
      opacity: 0;
      transition: opacity 500ms var(--easing);
    }
    &:hover {
      .toggle-icon {
        background: var(--neutral-200, #f0f7f7);
      }
    }
    &:has(input:focus-visible) {
      outline: 2px solid var(--neutral-200, #f0f7f7);
      outline-offset: 5px;
    }
    &:has(input:checked) {
      &::before {
        opacity: 1;
      }
      .toggle-icon {
        transform: translateX(1.375rem);
        background-color: var(--neutral-900, #000103);
        &::before {
          opacity: 1;
        }
        svg {
          stroke-dashoffset: 0;
        }
      }
    }
    &:has(input:disabled) {
      opacity: 0.62;
    }
    input {
      position: absolute;
      opacity: 0;
    }
  }
  .toggle-icon {
    margin: calc(0.25rem - 1px);
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
    background-color: var(--neutral-400, #c6cdcc);
    display: grid;
    place-items: center;
    transition:
      transform 500ms var(--easing),
      background-color 300ms;
    &::before {
      content: '';
      width: 1rem;
      height: 1rem;
      position: absolute;
      background-color: var(--primary-500, #064040);
      filter: blur(6px);
      z-index: -1;
      opacity: 0;
      transition: opacity 500ms var(--easing);
    }
    svg {
      stroke-dasharray: 12;
      stroke-dashoffset: -12;
      transition: stroke-dashoffset 500ms var(--easing);
    }
  }
</style>
