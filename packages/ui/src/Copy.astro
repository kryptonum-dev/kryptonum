---
import { type Language } from '@repo/shared/languages'

type Props = {
  data: string
  successMessage?: string
}
const translations = {
  pl: {
    copy: 'Skopiuj',
    copySuccess: 'Pomy≈õlnie skopiowano',
  },
  en: {
    copy: 'Copy',
    copySuccess: 'Successfully copied',
  },
}
const lang = (Astro.params.lang as Language) || 'pl'
const { data, successMessage } = Astro.props
const t = translations[lang]
---

<button
  class="CopyToClipboard"
  data-copy-text={data}
  aria-label={t.copy}
  type="button"
  data-success-message={successMessage || t.copySuccess}>
  <span>{t.copy}</span>
</button>

<style is:global lang="scss">
  .CopyToClipboard {
    display: inline-flex;
    height: 2rem;
    position: relative;
    font-size: var(--typography-body-m, 0.875rem);
    transition: transform 500ms var(--easing);
    &::before {
      $tap-incremnet: 0.4375rem;
      content: '';
      position: absolute;
      left: -$tap-incremnet;
      right: -$tap-incremnet;
      top: -$tap-incremnet;
      bottom: -$tap-incremnet;
    }
    span {
      background:
        linear-gradient(var(--primary-900), var(--primary-900)) padding-box,
        var(--primary-gradient-400) border-box;
      border: 1px solid rgba(255, 255, 255, 0);
      border-radius: 4rem;
      width: 100%;
      height: 100%;
      padding: 0 0.62rem;
      position: relative;
      display: inline-flex;
      gap: 0.25rem;
      align-items: center;
      z-index: 2;
      overflow: hidden;
      &::before {
        content: '';
        width: 50%;
        aspect-ratio: 1/1;
        position: absolute;
        left: 50%;
        bottom: 0;
        transform: translate(-50%, 50%);
        border-radius: 50%;
        background-color: var(--primary-600, #042b2b);
        z-index: -1;
        filter: blur(6px);
        transition:
          opacity 800ms var(--easing),
          transform 800ms var(--easing);
        opacity: 0;
      }
    }
    &:hover {
      span {
        &::before {
          opacity: 1;
        }
      }
    }
    &:active {
      transition: none;
      transform: scale(0.98);
      span {
        &::before {
          transform: translate(-50%, 50%) scale(2);
        }
      }
    }
  }
</style>

<script>
  import { showToast } from '@repo/ui/Toast/index.ts'

  document.querySelectorAll('.CopyToClipboard').forEach((element) => {
    const successMessage = element.getAttribute('data-success-message')
    element.addEventListener('click', () => {
      const copyText = element.getAttribute('data-copy-text')
      if (copyText) {
        navigator.clipboard.writeText(copyText)
        showToast(successMessage)
      }
    })
  })
</script>
