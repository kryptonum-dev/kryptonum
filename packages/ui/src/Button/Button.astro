---
import Image from '@repo/ui/Image'
import BaseButton, { type Props as ButtonDataProps } from './Button.tsx'

type Props = ButtonDataProps

const { ...props } = Astro.props

const svgId = `arrow-icon-${Math.random().toString(36).slice(2, 9)}`

let finalHref = props.href
if (props.linkType === 'internal' && props.href) {
  const currentDomain = Astro.url.origin
  if (props.documentType === 'ShopProduct_Collection' && !currentDomain.includes('learn.kryptonum.eu')) {
    finalHref = `https://learn.kryptonum.eu${props.href}`
  } else if (props.documentType !== 'ShopProduct_Collection' && currentDomain.includes('learn.kryptonum.eu')) {
    finalHref = `https://kryptonum.eu${props.href}`
  }
  if (props.documentType === 'LandingPage_Collection' && !currentDomain.includes('l.kryptonum.eu')) {
    finalHref = `https://l.kryptonum.eu${props.href}`
  } else if (props.documentType !== 'LandingPage_Collection' && currentDomain.includes('l.kryptonum.eu')) {
    finalHref = `https://kryptonum.eu${props.href}`
  }
}

const modifiedProps = {
  ...{
    ...props,
    href: finalHref,
  },
}
---

<BaseButton {...modifiedProps}>
  <span>
    {props.text || <slot />}
  </span>
  {
    props.img ? (
      <Image {...props.img} sizes="28px" class="gradient-thumbnail" />
    ) : (
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="17" fill="none">
        <path
          stroke={`url(#${svgId})`}
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M2.664 8.5h10.667m0 0-4-4m4 4-4 4"
        />
        <defs>
          <linearGradient id={svgId} x1="13.131" x2="2.064" y1="4.5" y2="5.44" gradientUnits="userSpaceOnUse">
            <stop stop-color="#2DD282" />
            <stop offset="1" stop-color="#90F4E8" />
          </linearGradient>
        </defs>
      </svg>
    )
  }
</BaseButton>
